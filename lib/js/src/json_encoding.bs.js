// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Sys = require("bs-platform/lib/js/sys.js");
var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Bytes = require("bs-platform/lib/js/bytes.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Int32 = require("bs-platform/lib/js/int32.js");
var Format = require("bs-platform/lib/js/format.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Json_repr = require("./json_repr.bs.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Caml_float = require("bs-platform/lib/js/caml_float.js");
var Caml_int64 = require("bs-platform/lib/js/caml_int64.js");
var Json_query = require("./json_query.bs.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Json_schema = require("./json_schema.bs.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");
var Caml_js_exceptions = require("bs-platform/lib/js/caml_js_exceptions.js");

var Unexpected = /* @__PURE__ */Caml_exceptions.create("Json_encoding.Unexpected");

var No_case_matched = /* @__PURE__ */Caml_exceptions.create("Json_encoding.No_case_matched");

var Bad_array_size = /* @__PURE__ */Caml_exceptions.create("Json_encoding.Bad_array_size");

var Missing_field = /* @__PURE__ */Caml_exceptions.create("Json_encoding.Missing_field");

var Unexpected_field = /* @__PURE__ */Caml_exceptions.create("Json_encoding.Unexpected_field");

var Bad_schema = /* @__PURE__ */Caml_exceptions.create("Json_encoding.Bad_schema");

var Cannot_destruct = /* @__PURE__ */Caml_exceptions.create("Json_encoding.Cannot_destruct");

function unexpected(kind, expected) {
  var kind$1;
  if (typeof kind === "string") {
    kind$1 = "null";
  } else {
    var variant = kind.NAME;
    kind$1 = variant === "A" ? (
        kind.VAL ? "array" : "empty array"
      ) : (
        variant === "O" ? (
            kind.VAL ? "object" : "empty object"
          ) : (
            variant === "Float" ? "number" : (
                variant === "Bool" ? "boolean" : "string"
              )
          )
      );
  }
  return {
          RE_EXN_ID: Cannot_destruct,
          _1: [
            /* [] */0,
            {
              RE_EXN_ID: Unexpected,
              _1: kind$1,
              _2: expected
            }
          ]
        };
}

function construct(enc, v) {
  var construct$1 = function (_t) {
    while(true) {
      var t = _t;
      if (typeof t === "number") {
        switch (t) {
          case /* Null */0 :
              return function (param) {
                return Curry._1(Json_repr.Ezjsonm.repr, "Null");
              };
          case /* Empty */1 :
              return function (param) {
                return Curry._1(Json_repr.Ezjsonm.repr, {
                            NAME: "O",
                            VAL: /* [] */0
                          });
              };
          case /* Ignore */2 :
              return function (param) {
                return Curry._1(Json_repr.Ezjsonm.repr, {
                            NAME: "O",
                            VAL: /* [] */0
                          });
              };
          case /* Bool */3 :
              return function (b) {
                return Curry._1(Json_repr.Ezjsonm.repr, {
                            NAME: "Bool",
                            VAL: b
                          });
              };
          case /* String */4 :
              return function (s) {
                return Curry._1(Json_repr.Ezjsonm.repr, {
                            NAME: "String",
                            VAL: s
                          });
              };
          
        }
      } else {
        switch (t.TAG | 0) {
          case /* Option */0 :
              var t$1 = t._0;
              return (function(t$1){
              return function (v) {
                if (v !== undefined) {
                  return Curry._1(construct$1(t$1), Caml_option.valFromOption(v));
                } else {
                  return Curry._1(Json_repr.Ezjsonm.repr, "Null");
                }
              }
              }(t$1));
          case /* Constant */1 :
              var str = t._0;
              return (function(str){
              return function (param) {
                return Curry._1(Json_repr.Ezjsonm.repr, {
                            NAME: "String",
                            VAL: str
                          });
              }
              }(str));
          case /* Int */2 :
              var match = t._0;
              var upper_bound = match.upper_bound;
              var lower_bound = match.lower_bound;
              var to_float = match.to_float;
              var int_name = match.int_name;
              return (function(upper_bound,lower_bound,to_float,int_name){
              return function (i) {
                if (Caml_obj.caml_lessthan(i, lower_bound) || Caml_obj.caml_greaterthan(i, upper_bound)) {
                  Pervasives.invalid_arg("Json_encoding.construct: " + (int_name + " out of range"));
                }
                return Curry._1(Json_repr.Ezjsonm.repr, {
                            NAME: "Float",
                            VAL: Curry._1(to_float, i)
                          });
              }
              }(upper_bound,lower_bound,to_float,int_name));
          case /* Float */3 :
              var match$1 = t._0;
              if (match$1 === undefined) {
                return function ($$float) {
                  return Curry._1(Json_repr.Ezjsonm.repr, {
                              NAME: "Float",
                              VAL: $$float
                            });
                };
              }
              var maximum = match$1.maximum;
              var minimum = match$1.minimum;
              var err = "Json_encoding.construct: " + (match$1.float_name + " out of range");
              return (function(maximum,minimum,err){
              return function ($$float) {
                if ($$float < minimum || $$float > maximum) {
                  Pervasives.invalid_arg(err);
                }
                return Curry._1(Json_repr.Ezjsonm.repr, {
                            NAME: "Float",
                            VAL: $$float
                          });
              }
              }(maximum,minimum,err));
          case /* Array */4 :
              var t$2 = t._0;
              var w = (function(t$2){
              return function w(v) {
                return Curry._1(construct$1(t$2), v);
              }
              }(t$2));
              return function (arr) {
                return Curry._1(Json_repr.Ezjsonm.repr, {
                            NAME: "A",
                            VAL: $$Array.to_list($$Array.map(w, arr))
                          });
              };
          case /* Obj */5 :
              var match$2 = t._0;
              switch (match$2.TAG | 0) {
                case /* Req */0 :
                    var match$3 = match$2._0;
                    var t$3 = match$3.encoding;
                    var n = match$3.name;
                    return (function(t$3,n){
                    return function (v) {
                      return Curry._1(Json_repr.Ezjsonm.repr, {
                                  NAME: "O",
                                  VAL: {
                                    hd: [
                                      n,
                                      Curry._1(construct$1(t$3), v)
                                    ],
                                    tl: /* [] */0
                                  }
                                });
                    }
                    }(t$3,n));
                case /* Opt */1 :
                    var match$4 = match$2._0;
                    var t$4 = match$4.encoding;
                    var n$1 = match$4.name;
                    return (function(t$4,n$1){
                    return function (v) {
                      if (v !== undefined) {
                        return Curry._1(Json_repr.Ezjsonm.repr, {
                                    NAME: "O",
                                    VAL: {
                                      hd: [
                                        n$1,
                                        Curry._1(construct$1(t$4), Caml_option.valFromOption(v))
                                      ],
                                      tl: /* [] */0
                                    }
                                  });
                      } else {
                        return Curry._1(Json_repr.Ezjsonm.repr, {
                                    NAME: "O",
                                    VAL: /* [] */0
                                  });
                      }
                    }
                    }(t$4,n$1));
                case /* Dft */2 :
                    var match$5 = match$2._0;
                    var d = match$5.default;
                    var t$5 = match$5.encoding;
                    var n$2 = match$5.name;
                    return (function(d,t$5,n$2){
                    return function (v) {
                      return Curry._1(Json_repr.Ezjsonm.repr, {
                                  NAME: "O",
                                  VAL: Caml_obj.caml_notequal(v, d) ? ({
                                        hd: [
                                          n$2,
                                          Curry._1(construct$1(t$5), v)
                                        ],
                                        tl: /* [] */0
                                      }) : /* [] */0
                                });
                    }
                    }(d,t$5,n$2));
                
              }
          case /* Objs */6 :
              var o2 = t._1;
              var o1 = t._0;
              return (function(o2,o1){
              return function (param) {
                var match = Curry._1(Json_repr.Ezjsonm.view, Curry._1(construct$1(o1), param[0]));
                var match$1 = Curry._1(Json_repr.Ezjsonm.view, Curry._1(construct$1(o2), param[1]));
                if (typeof match === "string" || !(match.NAME === "O" && !(typeof match$1 === "string" || match$1.NAME !== "O"))) {
                  return Pervasives.invalid_arg("Json_encoding.construct: consequence of bad merge_objs");
                } else {
                  return Curry._1(Json_repr.Ezjsonm.repr, {
                              NAME: "O",
                              VAL: Pervasives.$at(match.VAL, match$1.VAL)
                            });
                }
              }
              }(o2,o1));
          case /* Tup */7 :
              var t$6 = t._0;
              return (function(t$6){
              return function (v) {
                return Curry._1(Json_repr.Ezjsonm.repr, {
                            NAME: "A",
                            VAL: {
                              hd: Curry._1(construct$1(t$6), v),
                              tl: /* [] */0
                            }
                          });
              }
              }(t$6));
          case /* Tups */8 :
              var o2$1 = t._1;
              var o1$1 = t._0;
              return (function(o2$1,o1$1){
              return function (param) {
                var match = Curry._1(Json_repr.Ezjsonm.view, Curry._1(construct$1(o1$1), param[0]));
                var match$1 = Curry._1(Json_repr.Ezjsonm.view, Curry._1(construct$1(o2$1), param[1]));
                if (typeof match === "string" || !(match.NAME === "A" && !(typeof match$1 === "string" || match$1.NAME !== "A"))) {
                  return Pervasives.invalid_arg("Json_encoding.construct: consequence of bad merge_tups");
                } else {
                  return Curry._1(Json_repr.Ezjsonm.repr, {
                              NAME: "A",
                              VAL: Pervasives.$at(match.VAL, match$1.VAL)
                            });
                }
              }
              }(o2$1,o1$1));
          case /* Custom */9 :
              var write = t._0.write;
              return (function(write){
              return function (j) {
                return Curry._2(write, Json_repr.Ezjsonm, j);
              }
              }(write));
          case /* Conv */10 :
              var t$7 = t._2;
              var ffrom = t._0;
              return (function(t$7,ffrom){
              return function (v) {
                return Curry._1(construct$1(t$7), Curry._1(ffrom, v));
              }
              }(t$7,ffrom));
          case /* Describe */11 :
              _t = t._0.encoding;
              continue ;
          case /* Mu */12 :
              _t = Curry._1(t._0.self, t);
              continue ;
          case /* Union */13 :
              var cases = t._0;
              return (function(cases){
              return function (v) {
                var _param = cases;
                while(true) {
                  var param = _param;
                  if (!param) {
                    return Pervasives.invalid_arg("Json_encoding.construct: consequence of bad union");
                  }
                  var match = param.hd._0;
                  var v$1 = Curry._1(match.proj, v);
                  if (v$1 !== undefined) {
                    return Curry._1(construct$1(match.encoding), Caml_option.valFromOption(v$1));
                  }
                  _param = param.tl;
                  continue ;
                };
              }
              }(cases));
          
        }
      }
    };
  };
  return Curry._1(construct$1(enc), v);
}

function destruct(_t) {
  while(true) {
    var t = _t;
    if (typeof t === "number") {
      switch (t) {
        case /* Null */0 :
            return function (v) {
              var k = Curry._1(Json_repr.Ezjsonm.view, v);
              if (k === "Null") {
                return ;
              }
              throw unexpected(k, "null");
            };
        case /* Empty */1 :
            return function (v) {
              var k = Curry._1(Json_repr.Ezjsonm.view, v);
              if (typeof k === "string") {
                throw unexpected(k, "an empty object");
              }
              if (k.NAME === "O") {
                var match = k.VAL;
                if (!match) {
                  return ;
                }
                if (match.tl) {
                  throw unexpected(k, "an empty object");
                }
                throw {
                      RE_EXN_ID: Cannot_destruct,
                      _1: [
                        /* [] */0,
                        {
                          RE_EXN_ID: Unexpected_field,
                          _1: match.hd[0]
                        }
                      ],
                      Error: new Error()
                    };
              }
              throw unexpected(k, "an empty object");
            };
        case /* Ignore */2 :
            return function (v) {
              Curry._1(Json_repr.Ezjsonm.view, v);
              
            };
        case /* Bool */3 :
            return function (v) {
              var k = Curry._1(Json_repr.Ezjsonm.view, v);
              if (typeof k === "string") {
                throw unexpected(k, "boolean");
              }
              if (k.NAME === "Bool") {
                return k.VAL;
              }
              throw unexpected(k, "boolean");
            };
        case /* String */4 :
            return function (v) {
              var k = Curry._1(Json_repr.Ezjsonm.view, v);
              if (typeof k === "string") {
                throw unexpected(k, "string");
              }
              if (k.NAME === "String") {
                return k.VAL;
              }
              throw unexpected(k, "string");
            };
        
      }
    } else {
      switch (t.TAG | 0) {
        case /* Option */0 :
            var t$1 = t._0;
            return (function(t$1){
            return function (v) {
              var match = Curry._1(Json_repr.Ezjsonm.view, v);
              if (match === "Null") {
                return ;
              } else {
                return Caml_option.some(Curry._1(destruct(t$1), v));
              }
            }
            }(t$1));
        case /* Constant */1 :
            var str = t._0;
            return (function(str){
            return function (v) {
              var x = Curry._1(Json_repr.Ezjsonm.view, v);
              if (typeof x === "string") {
                throw unexpected(x, str);
              }
              if (x.NAME === "String") {
                if (x.VAL === str) {
                  return ;
                }
                throw unexpected(x, str);
              }
              throw unexpected(x, str);
            }
            }(str));
        case /* Int */2 :
            var match = t._0;
            var to_float = match.to_float;
            var of_float = match.of_float;
            var int_name = match.int_name;
            var lower_bound = Curry._1(to_float, match.lower_bound);
            var upper_bound = Curry._1(to_float, match.upper_bound);
            return (function(of_float,int_name,lower_bound,upper_bound){
            return function (v) {
              var k = Curry._1(Json_repr.Ezjsonm.view, v);
              if (typeof k === "string") {
                throw unexpected(k, "number");
              }
              if (k.NAME === "Float") {
                var match = Caml_float.caml_modf_float(k.VAL);
                var v$1 = match[1];
                if (match[0] !== 0) {
                  var exn_1 = int_name + " cannot have a fractional part";
                  var exn = {
                    RE_EXN_ID: "Failure",
                    _1: exn_1
                  };
                  throw {
                        RE_EXN_ID: Cannot_destruct,
                        _1: [
                          /* [] */0,
                          exn
                        ],
                        Error: new Error()
                      };
                }
                if (v$1 < lower_bound || v$1 > upper_bound) {
                  var exn_1$1 = int_name + " out of range";
                  var exn$1 = {
                    RE_EXN_ID: "Failure",
                    _1: exn_1$1
                  };
                  throw {
                        RE_EXN_ID: Cannot_destruct,
                        _1: [
                          /* [] */0,
                          exn$1
                        ],
                        Error: new Error()
                      };
                }
                return Curry._1(of_float, v$1);
              }
              throw unexpected(k, "number");
            }
            }(of_float,int_name,lower_bound,upper_bound));
        case /* Float */3 :
            var match$1 = t._0;
            if (match$1 === undefined) {
              return function (v) {
                var k = Curry._1(Json_repr.Ezjsonm.view, v);
                if (typeof k === "string") {
                  throw unexpected(k, "float");
                }
                if (k.NAME === "Float") {
                  return k.VAL;
                }
                throw unexpected(k, "float");
              };
            }
            var maximum = match$1.maximum;
            var minimum = match$1.minimum;
            var float_name = match$1.float_name;
            return (function(maximum,minimum,float_name){
            return function (v) {
              var k = Curry._1(Json_repr.Ezjsonm.view, v);
              if (typeof k === "string") {
                throw unexpected(k, "float");
              }
              if (k.NAME === "Float") {
                var f = k.VAL;
                if (!(f < minimum || f > maximum)) {
                  return f;
                }
                var exn_1 = float_name + " out of range";
                var exn = {
                  RE_EXN_ID: "Failure",
                  _1: exn_1
                };
                throw {
                      RE_EXN_ID: Cannot_destruct,
                      _1: [
                        /* [] */0,
                        exn
                      ],
                      Error: new Error()
                    };
              }
              throw unexpected(k, "float");
            }
            }(maximum,minimum,float_name));
        case /* Array */4 :
            var t$2 = t._0;
            return (function(t$2){
            return function (v) {
              var k = Curry._1(Json_repr.Ezjsonm.view, v);
              if (typeof k === "string") {
                throw unexpected(k, "array");
              }
              var variant = k.NAME;
              if (variant === "A") {
                return $$Array.mapi((function (i, cell) {
                              try {
                                return Curry._1(destruct(t$2), cell);
                              }
                              catch (raw_exn){
                                var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
                                if (exn.RE_EXN_ID === Cannot_destruct) {
                                  var match = exn._1;
                                  throw {
                                        RE_EXN_ID: Cannot_destruct,
                                        _1: [
                                          {
                                            hd: {
                                              NAME: "Index",
                                              VAL: i
                                            },
                                            tl: match[0]
                                          },
                                          match[1]
                                        ],
                                        Error: new Error()
                                      };
                                }
                                throw exn;
                              }
                            }), $$Array.of_list(k.VAL));
              }
              if (variant === "O") {
                if (k.VAL) {
                  throw unexpected(k, "array");
                }
                return [];
              }
              throw unexpected(k, "array");
            }
            }(t$2));
        case /* Obj */5 :
            var d = destruct_obj(t);
            return (function(d){
            return function (v) {
              var k = Curry._1(Json_repr.Ezjsonm.view, v);
              if (typeof k === "string") {
                throw unexpected(k, "object");
              }
              if (k.NAME === "O") {
                var match = Curry._1(d, k.VAL);
                var rest = match[1];
                var r = match[0];
                if (!rest) {
                  return r;
                }
                if (!match[2]) {
                  throw {
                        RE_EXN_ID: Unexpected_field,
                        _1: rest.hd[0],
                        Error: new Error()
                      };
                }
                return r;
              }
              throw unexpected(k, "object");
            }
            }(d));
        case /* Objs */6 :
            var d$1 = destruct_obj(t);
            return (function(d$1){
            return function (v) {
              var k = Curry._1(Json_repr.Ezjsonm.view, v);
              if (typeof k === "string") {
                throw unexpected(k, "object");
              }
              if (k.NAME === "O") {
                var match = Curry._1(d$1, k.VAL);
                var rest = match[1];
                var r = match[0];
                if (!rest) {
                  return r;
                }
                if (!match[2]) {
                  throw {
                        RE_EXN_ID: Unexpected_field,
                        _1: rest.hd[0],
                        Error: new Error()
                      };
                }
                return r;
              }
              throw unexpected(k, "object");
            }
            }(d$1));
        case /* Tup */7 :
            var match$2 = destruct_tup(0, t);
            var i = match$2[1];
            var r = match$2[0];
            return (function(i,r){
            return function (v) {
              var k = Curry._1(Json_repr.Ezjsonm.view, v);
              if (typeof k === "string") {
                throw unexpected(k, "array");
              }
              if (k.NAME === "A") {
                var cells = $$Array.of_list(k.VAL);
                var len = cells.length;
                if (i !== cells.length) {
                  throw {
                        RE_EXN_ID: Cannot_destruct,
                        _1: [
                          /* [] */0,
                          {
                            RE_EXN_ID: Bad_array_size,
                            _1: len,
                            _2: i
                          }
                        ],
                        Error: new Error()
                      };
                }
                return Curry._1(r, cells);
              }
              throw unexpected(k, "array");
            }
            }(i,r));
        case /* Tups */8 :
            var match$3 = destruct_tup(0, t);
            var i$1 = match$3[1];
            var r$1 = match$3[0];
            return (function(i$1,r$1){
            return function (v) {
              var k = Curry._1(Json_repr.Ezjsonm.view, v);
              if (typeof k === "string") {
                throw unexpected(k, "array");
              }
              if (k.NAME === "A") {
                var cells = $$Array.of_list(k.VAL);
                var len = cells.length;
                if (i$1 !== cells.length) {
                  throw {
                        RE_EXN_ID: Cannot_destruct,
                        _1: [
                          /* [] */0,
                          {
                            RE_EXN_ID: Bad_array_size,
                            _1: len,
                            _2: i$1
                          }
                        ],
                        Error: new Error()
                      };
                }
                return Curry._1(r$1, cells);
              }
              throw unexpected(k, "array");
            }
            }(i$1,r$1));
        case /* Custom */9 :
            return Curry._1(t._0.read, Json_repr.Ezjsonm);
        case /* Conv */10 :
            var t$3 = t._2;
            var fto = t._1;
            return (function(t$3,fto){
            return function (v) {
              return Curry._1(fto, Curry._1(destruct(t$3), v));
            }
            }(t$3,fto));
        case /* Describe */11 :
            _t = t._0.encoding;
            continue ;
        case /* Mu */12 :
            _t = Curry._1(t._0.self, t);
            continue ;
        case /* Union */13 :
            var cases = t._0;
            return (function(cases){
            return function (v) {
              var _errs = /* [] */0;
              var _param = cases;
              while(true) {
                var param = _param;
                var errs = _errs;
                if (param) {
                  var match = param.hd._0;
                  try {
                    return Curry._1(match.inj, Curry._1(destruct(match.encoding), v));
                  }
                  catch (raw_err){
                    var err = Caml_js_exceptions.internalToOCamlException(raw_err);
                    _param = param.tl;
                    _errs = {
                      hd: err,
                      tl: errs
                    };
                    continue ;
                  }
                } else {
                  throw {
                        RE_EXN_ID: Cannot_destruct,
                        _1: [
                          /* [] */0,
                          {
                            RE_EXN_ID: No_case_matched,
                            _1: List.rev(errs)
                          }
                        ],
                        Error: new Error()
                      };
                }
              };
            }
            }(cases));
        
      }
    }
  };
}

function destruct_tup(i, _t) {
  while(true) {
    var t = _t;
    if (typeof t === "number") {
      return Pervasives.invalid_arg("Json_encoding.destruct: consequence of bad merge_tups");
    }
    switch (t.TAG | 0) {
      case /* Tup */7 :
          var t$1 = t._0;
          return [
                  (function(t$1){
                  return function (arr) {
                    try {
                      return Curry._1(destruct(t$1), Caml_array.get(arr, i));
                    }
                    catch (raw_exn){
                      var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
                      if (exn.RE_EXN_ID === Cannot_destruct) {
                        var match = exn._1;
                        throw {
                              RE_EXN_ID: Cannot_destruct,
                              _1: [
                                {
                                  hd: {
                                    NAME: "Index",
                                    VAL: i
                                  },
                                  tl: match[0]
                                },
                                match[1]
                              ],
                              Error: new Error()
                            };
                      }
                      throw exn;
                    }
                  }
                  }(t$1)),
                  i + 1 | 0
                ];
      case /* Tups */8 :
          var match = destruct_tup(i, t._0);
          var r1 = match[0];
          var match$1 = destruct_tup(match[1], t._1);
          var r2 = match$1[0];
          return [
                  (function(r1,r2){
                  return function (arr) {
                    return [
                            Curry._1(r1, arr),
                            Curry._1(r2, arr)
                          ];
                  }
                  }(r1,r2)),
                  match$1[1]
                ];
      case /* Conv */10 :
          var fto = t._1;
          var match$2 = destruct_tup(i, t._2);
          var r = match$2[0];
          return [
                  (function(fto,r){
                  return function (arr) {
                    return Curry._1(fto, Curry._1(r, arr));
                  }
                  }(fto,r)),
                  match$2[1]
                ];
      case /* Describe */11 :
          _t = t._0.encoding;
          continue ;
      case /* Mu */12 :
          _t = Curry._1(t._0.self, t);
          continue ;
      default:
        return Pervasives.invalid_arg("Json_encoding.destruct: consequence of bad merge_tups");
    }
  };
}

function destruct_obj(_t) {
  while(true) {
    var t = _t;
    var assoc = function (_acc, n, _param) {
      while(true) {
        var param = _param;
        var acc = _acc;
        if (param) {
          var rest = param.tl;
          var oth = param.hd;
          if (Caml_obj.caml_equal(n, oth[0])) {
            return [
                    oth[1],
                    Pervasives.$at(acc, rest)
                  ];
          }
          _param = rest;
          _acc = {
            hd: oth,
            tl: acc
          };
          continue ;
        }
        throw {
              RE_EXN_ID: "Not_found",
              Error: new Error()
            };
      };
    };
    if (typeof t === "number") {
      switch (t) {
        case /* Empty */1 :
            return function (fields) {
              return [
                      undefined,
                      fields,
                      false
                    ];
            };
        case /* Ignore */2 :
            return function (fields) {
              return [
                      undefined,
                      fields,
                      true
                    ];
            };
        default:
          return Pervasives.invalid_arg("Json_encoding.destruct: consequence of bad merge_objs");
      }
    } else {
      switch (t.TAG | 0) {
        case /* Obj */5 :
            var match = t._0;
            switch (match.TAG | 0) {
              case /* Req */0 :
                  var match$1 = match._0;
                  var t$1 = match$1.encoding;
                  var n = match$1.name;
                  return (function(t$1,n){
                  return function (fields) {
                    try {
                      var match = assoc(/* [] */0, n, fields);
                      return [
                              Curry._1(destruct(t$1), match[0]),
                              match[1],
                              false
                            ];
                    }
                    catch (raw_exn){
                      var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
                      if (exn.RE_EXN_ID === "Not_found") {
                        throw {
                              RE_EXN_ID: Cannot_destruct,
                              _1: [
                                /* [] */0,
                                {
                                  RE_EXN_ID: Missing_field,
                                  _1: n
                                }
                              ],
                              Error: new Error()
                            };
                      }
                      if (exn.RE_EXN_ID === Cannot_destruct) {
                        var match$1 = exn._1;
                        throw {
                              RE_EXN_ID: Cannot_destruct,
                              _1: [
                                {
                                  hd: {
                                    NAME: "Field",
                                    VAL: n
                                  },
                                  tl: match$1[0]
                                },
                                match$1[1]
                              ],
                              Error: new Error()
                            };
                      }
                      throw exn;
                    }
                  }
                  }(t$1,n));
              case /* Opt */1 :
                  var match$2 = match._0;
                  var t$2 = match$2.encoding;
                  var n$1 = match$2.name;
                  return (function(t$2,n$1){
                  return function (fields) {
                    try {
                      var match = assoc(/* [] */0, n$1, fields);
                      return [
                              Caml_option.some(Curry._1(destruct(t$2), match[0])),
                              match[1],
                              false
                            ];
                    }
                    catch (raw_exn){
                      var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
                      if (exn.RE_EXN_ID === "Not_found") {
                        return [
                                undefined,
                                fields,
                                false
                              ];
                      }
                      if (exn.RE_EXN_ID === Cannot_destruct) {
                        var match$1 = exn._1;
                        throw {
                              RE_EXN_ID: Cannot_destruct,
                              _1: [
                                {
                                  hd: {
                                    NAME: "Field",
                                    VAL: n$1
                                  },
                                  tl: match$1[0]
                                },
                                match$1[1]
                              ],
                              Error: new Error()
                            };
                      }
                      throw exn;
                    }
                  }
                  }(t$2,n$1));
              case /* Dft */2 :
                  var match$3 = match._0;
                  var d = match$3.default;
                  var t$3 = match$3.encoding;
                  var n$2 = match$3.name;
                  return (function(d,t$3,n$2){
                  return function (fields) {
                    try {
                      var match = assoc(/* [] */0, n$2, fields);
                      return [
                              Curry._1(destruct(t$3), match[0]),
                              match[1],
                              false
                            ];
                    }
                    catch (raw_exn){
                      var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
                      if (exn.RE_EXN_ID === "Not_found") {
                        return [
                                d,
                                fields,
                                false
                              ];
                      }
                      if (exn.RE_EXN_ID === Cannot_destruct) {
                        var match$1 = exn._1;
                        throw {
                              RE_EXN_ID: Cannot_destruct,
                              _1: [
                                {
                                  hd: {
                                    NAME: "Field",
                                    VAL: n$2
                                  },
                                  tl: match$1[0]
                                },
                                match$1[1]
                              ],
                              Error: new Error()
                            };
                      }
                      throw exn;
                    }
                  }
                  }(d,t$3,n$2));
              
            }
        case /* Objs */6 :
            var d1 = destruct_obj(t._0);
            var d2 = destruct_obj(t._1);
            return (function(d1,d2){
            return function (fields) {
              var match = Curry._1(d1, fields);
              var match$1 = Curry._1(d2, match[1]);
              return [
                      [
                        match[0],
                        match$1[0]
                      ],
                      match$1[1],
                      match[2] || match$1[2]
                    ];
            }
            }(d1,d2));
        case /* Conv */10 :
            var fto = t._1;
            var d$1 = destruct_obj(t._2);
            return (function(fto,d$1){
            return function (fields) {
              var match = Curry._1(d$1, fields);
              return [
                      Curry._1(fto, match[0]),
                      match[1],
                      match[2]
                    ];
            }
            }(fto,d$1));
        case /* Describe */11 :
            _t = t._0.encoding;
            continue ;
        case /* Mu */12 :
            _t = Curry._1(t._0.self, t);
            continue ;
        case /* Union */13 :
            var cases = t._0;
            return (function(cases){
            return function (fields) {
              var _errs = /* [] */0;
              var _param = cases;
              while(true) {
                var param = _param;
                var errs = _errs;
                if (param) {
                  var match = param.hd._0;
                  try {
                    var match$1 = Curry._1(destruct_obj(match.encoding), fields);
                    return [
                            Curry._1(match.inj, match$1[0]),
                            match$1[1],
                            match$1[2]
                          ];
                  }
                  catch (raw_err){
                    var err = Caml_js_exceptions.internalToOCamlException(raw_err);
                    _param = param.tl;
                    _errs = {
                      hd: err,
                      tl: errs
                    };
                    continue ;
                  }
                } else {
                  throw {
                        RE_EXN_ID: Cannot_destruct,
                        _1: [
                          /* [] */0,
                          {
                            RE_EXN_ID: No_case_matched,
                            _1: List.rev(errs)
                          }
                        ],
                        Error: new Error()
                      };
                }
              };
            }
            }(cases));
        default:
          return Pervasives.invalid_arg("Json_encoding.destruct: consequence of bad merge_objs");
      }
    }
  };
}

function custom(write, read, schema) {
  var read$1 = function (Repr_f, repr) {
    return Curry._1(read, Json_repr.convert(Repr_f, Json_repr.Ezjsonm, repr));
  };
  var write$1 = function (Repr_f, v) {
    return Json_repr.convert(Json_repr.Ezjsonm, Repr_f, Curry._1(write, v));
  };
  return {
          TAG: /* Custom */9,
          _0: {
            write: write$1,
            read: read$1
          },
          _1: schema
        };
}

function patch_description(title, description, elt) {
  if (title !== undefined) {
    if (description !== undefined) {
      return {
              title: title,
              description: description,
              default: elt.default,
              enum: elt.enum,
              kind: elt.kind,
              format: elt.format,
              id: elt.id
            };
    } else {
      return {
              title: title,
              description: elt.description,
              default: elt.default,
              enum: elt.enum,
              kind: elt.kind,
              format: elt.format,
              id: elt.id
            };
    }
  } else if (description !== undefined) {
    return {
            title: elt.title,
            description: description,
            default: elt.default,
            enum: elt.enum,
            kind: elt.kind,
            format: elt.format,
            id: elt.id
          };
  } else {
    return elt;
  }
}

function schema(definitions_path, encoding) {
  var sch = {
    contents: Json_schema.any
  };
  var prod = function (l1, l2) {
    if (!l1) {
      return /* [] */0;
    }
    var match = l1.hd;
    var b1 = match[1];
    var l1$1 = match[0];
    return Pervasives.$at(List.map((function (param) {
                      return [
                              Pervasives.$at(l1$1, param[0]),
                              b1 || param[1]
                            ];
                    }), l2), prod(l1.tl, l2));
  };
  var object_schema = function (_cases) {
    while(true) {
      var cases = _cases;
      if (typeof cases === "number") {
        switch (cases) {
          case /* Empty */1 :
              return {
                      hd: [
                        /* [] */0,
                        false
                      ],
                      tl: /* [] */0
                    };
          case /* Ignore */2 :
              return {
                      hd: [
                        /* [] */0,
                        true
                      ],
                      tl: /* [] */0
                    };
          default:
            return Pervasives.invalid_arg("Json_encoding.schema: consequence of bad merge_objs");
        }
      } else {
        switch (cases.TAG | 0) {
          case /* Obj */5 :
              var match = cases._0;
              switch (match.TAG | 0) {
                case /* Req */0 :
                    var match$1 = match._0;
                    return {
                            hd: [
                              {
                                hd: [
                                  match$1.name,
                                  patch_description(match$1.title, match$1.description, schema$1(match$1.encoding)),
                                  true,
                                  undefined
                                ],
                                tl: /* [] */0
                              },
                              false
                            ],
                            tl: /* [] */0
                          };
                case /* Opt */1 :
                    var match$2 = match._0;
                    return {
                            hd: [
                              {
                                hd: [
                                  match$2.name,
                                  patch_description(match$2.title, match$2.description, schema$1(match$2.encoding)),
                                  false,
                                  undefined
                                ],
                                tl: /* [] */0
                              },
                              false
                            ],
                            tl: /* [] */0
                          };
                case /* Dft */2 :
                    var match$3 = match._0;
                    var t = match$3.encoding;
                    var d = Json_repr.repr_to_any(Json_repr.Ezjsonm, construct(t, match$3.default));
                    return {
                            hd: [
                              {
                                hd: [
                                  match$3.name,
                                  patch_description(match$3.title, match$3.description, schema$1(t)),
                                  false,
                                  d
                                ],
                                tl: /* [] */0
                              },
                              false
                            ],
                            tl: /* [] */0
                          };
                
              }
          case /* Objs */6 :
              return prod(object_schema(cases._0), object_schema(cases._1));
          case /* Conv */10 :
              if (cases._3 !== undefined) {
                return Pervasives.invalid_arg("Json_encoding.schema: consequence of bad merge_objs");
              }
              _cases = cases._2;
              continue ;
          case /* Describe */11 :
              _cases = cases._0.encoding;
              continue ;
          case /* Mu */12 :
              _cases = Curry._1(cases._0.self, cases);
              continue ;
          case /* Union */13 :
              var cases$1 = cases._0;
              if (cases$1) {
                return List.flatten(List.map((function (param) {
                                  return object_schema(param._0.encoding);
                                }), cases$1));
              } else {
                return Pervasives.invalid_arg("Json_encoding.schema: empty union in object");
              }
          default:
            return Pervasives.invalid_arg("Json_encoding.schema: consequence of bad merge_objs");
        }
      }
    };
  };
  var array_schema = function (_t) {
    while(true) {
      var t = _t;
      if (typeof t === "number") {
        return Pervasives.invalid_arg("Json_encoding.schema: consequence of bad merge_tups");
      }
      switch (t.TAG | 0) {
        case /* Tup */7 :
            return {
                    hd: schema$1(t._0),
                    tl: /* [] */0
                  };
        case /* Tups */8 :
            return Pervasives.$at(array_schema(t._0), array_schema(t._1));
        case /* Conv */10 :
            if (t._3 !== undefined) {
              return Pervasives.invalid_arg("Json_encoding.schema: consequence of bad merge_tups");
            }
            _t = t._2;
            continue ;
        case /* Describe */11 :
            _t = t._0.encoding;
            continue ;
        case /* Mu */12 :
            _t = Curry._1(t._0.self, t);
            continue ;
        default:
          return Pervasives.invalid_arg("Json_encoding.schema: consequence of bad merge_tups");
      }
    };
  };
  var schema$1 = function (_t) {
    while(true) {
      var t = _t;
      if (typeof t === "number") {
        switch (t) {
          case /* Null */0 :
              return Json_schema.element(/* Null */1);
          case /* Empty */1 :
              return Json_schema.element({
                          TAG: /* Object */0,
                          _0: {
                            properties: Json_schema.object_specs.properties,
                            pattern_properties: Json_schema.object_specs.pattern_properties,
                            additional_properties: undefined,
                            min_properties: Json_schema.object_specs.min_properties,
                            max_properties: Json_schema.object_specs.max_properties,
                            schema_dependencies: Json_schema.object_specs.schema_dependencies,
                            property_dependencies: Json_schema.object_specs.property_dependencies
                          }
                        });
          case /* Ignore */2 :
              return Json_schema.element(/* Any */2);
          case /* Bool */3 :
              return Json_schema.element(/* Boolean */0);
          case /* String */4 :
              return Json_schema.element({
                          TAG: /* String */7,
                          _0: Json_schema.string_specs
                        });
          
        }
      } else {
        switch (t.TAG | 0) {
          case /* Option */0 :
              return Json_schema.element({
                          TAG: /* Combine */3,
                          _0: /* One_of */1,
                          _1: {
                            hd: schema$1(t._0),
                            tl: {
                              hd: Json_schema.element(/* Null */1),
                              tl: /* [] */0
                            }
                          }
                        });
          case /* Constant */1 :
              var init = Json_schema.element({
                    TAG: /* String */7,
                    _0: Json_schema.string_specs
                  });
              return {
                      title: init.title,
                      description: init.description,
                      default: init.default,
                      enum: {
                        hd: Json_repr.to_any({
                              NAME: "String",
                              VAL: t._0
                            }),
                        tl: /* [] */0
                      },
                      kind: init.kind,
                      format: init.format,
                      id: init.id
                    };
          case /* Int */2 :
              var match = t._0;
              var to_float = match.to_float;
              var minimum = [
                Curry._1(to_float, match.lower_bound),
                "Inclusive"
              ];
              var maximum = [
                Curry._1(to_float, match.upper_bound),
                "Inclusive"
              ];
              return Json_schema.element({
                          TAG: /* Integer */8,
                          _0: {
                            multiple_of: undefined,
                            minimum: minimum,
                            maximum: maximum
                          }
                        });
          case /* Float */3 :
              var match$1 = t._0;
              if (match$1 !== undefined) {
                return Json_schema.element({
                            TAG: /* Number */9,
                            _0: {
                              multiple_of: undefined,
                              minimum: [
                                match$1.minimum,
                                "Inclusive"
                              ],
                              maximum: [
                                match$1.maximum,
                                "Inclusive"
                              ]
                            }
                          });
              } else {
                return Json_schema.element({
                            TAG: /* Number */9,
                            _0: Json_schema.numeric_specs
                          });
              }
          case /* Array */4 :
              return Json_schema.element({
                          TAG: /* Monomorphic_array */2,
                          _0: schema$1(t._0),
                          _1: Json_schema.array_specs
                        });
          case /* Obj */5 :
              var more = object_schema(t);
              if (more && !more.tl) {
                var match$2 = more.hd;
                var additional_properties = match$2[1] ? Json_schema.element(/* Any */2) : undefined;
                return Json_schema.element({
                            TAG: /* Object */0,
                            _0: {
                              properties: match$2[0],
                              pattern_properties: Json_schema.object_specs.pattern_properties,
                              additional_properties: additional_properties,
                              min_properties: Json_schema.object_specs.min_properties,
                              max_properties: Json_schema.object_specs.max_properties,
                              schema_dependencies: Json_schema.object_specs.schema_dependencies,
                              property_dependencies: Json_schema.object_specs.property_dependencies
                            }
                          });
              }
              var elements = List.map((function (param) {
                      var additional_properties = param[1] ? Json_schema.element(/* Any */2) : undefined;
                      return Json_schema.element({
                                  TAG: /* Object */0,
                                  _0: {
                                    properties: param[0],
                                    pattern_properties: Json_schema.object_specs.pattern_properties,
                                    additional_properties: additional_properties,
                                    min_properties: Json_schema.object_specs.min_properties,
                                    max_properties: Json_schema.object_specs.max_properties,
                                    schema_dependencies: Json_schema.object_specs.schema_dependencies,
                                    property_dependencies: Json_schema.object_specs.property_dependencies
                                  }
                                });
                    }), more);
              return Json_schema.element({
                          TAG: /* Combine */3,
                          _0: /* One_of */1,
                          _1: elements
                        });
          case /* Objs */6 :
              var more$1 = object_schema(t);
              if (more$1 && !more$1.tl) {
                var match$3 = more$1.hd;
                var additional_properties$1 = match$3[1] ? Json_schema.element(/* Any */2) : undefined;
                return Json_schema.element({
                            TAG: /* Object */0,
                            _0: {
                              properties: match$3[0],
                              pattern_properties: Json_schema.object_specs.pattern_properties,
                              additional_properties: additional_properties$1,
                              min_properties: Json_schema.object_specs.min_properties,
                              max_properties: Json_schema.object_specs.max_properties,
                              schema_dependencies: Json_schema.object_specs.schema_dependencies,
                              property_dependencies: Json_schema.object_specs.property_dependencies
                            }
                          });
              }
              var elements$1 = List.map((function (param) {
                      var additional_properties = param[1] ? Json_schema.element(/* Any */2) : undefined;
                      return Json_schema.element({
                                  TAG: /* Object */0,
                                  _0: {
                                    properties: param[0],
                                    pattern_properties: Json_schema.object_specs.pattern_properties,
                                    additional_properties: additional_properties,
                                    min_properties: Json_schema.object_specs.min_properties,
                                    max_properties: Json_schema.object_specs.max_properties,
                                    schema_dependencies: Json_schema.object_specs.schema_dependencies,
                                    property_dependencies: Json_schema.object_specs.property_dependencies
                                  }
                                });
                    }), more$1);
              return Json_schema.element({
                          TAG: /* Combine */3,
                          _0: /* One_of */1,
                          _1: elements$1
                        });
          case /* Tup */7 :
          case /* Tups */8 :
              return Json_schema.element({
                          TAG: /* Array */1,
                          _0: array_schema(t),
                          _1: Json_schema.array_specs
                        });
          case /* Custom */9 :
              var s = t._1;
              sch.contents = Json_schema.merge_definitions([
                      sch.contents,
                      s
                    ])[0];
              return Json_schema.root(s);
          case /* Conv */10 :
              var s$1 = t._3;
              if (s$1 !== undefined) {
                var s$2 = Caml_option.valFromOption(s$1);
                sch.contents = Json_schema.merge_definitions([
                        sch.contents,
                        s$2
                      ])[0];
                return Json_schema.root(s$2);
              }
              _t = t._2;
              continue ;
          case /* Describe */11 :
              var match$4 = t._0;
              var schema$2 = patch_description(match$4.title, match$4.description, schema$1(match$4.encoding));
              var match$5 = Json_schema.add_definition(definitions_path, match$4.id, schema$2, sch.contents);
              sch.contents = Json_schema.merge_definitions([
                      sch.contents,
                      match$5[0]
                    ])[0];
              return match$5[1];
          case /* Mu */12 :
              var match$6 = t._0;
              var name = match$6.id;
              var fake_schema;
              if (Json_schema.definition_exists(definitions_path, name, sch.contents)) {
                fake_schema = Json_schema.update(Json_schema.definition_ref(definitions_path, name), sch.contents);
              } else {
                var match$7 = Json_schema.add_definition(definitions_path, name, Json_schema.element(/* Dummy */3), sch.contents);
                fake_schema = Json_schema.update(match$7[1], match$7[0]);
              }
              var fake_self_0 = {
                write: (function (param, param$1) {
                    throw {
                          RE_EXN_ID: "Assert_failure",
                          _1: [
                            "json_encoding.ml",
                            504,
                            40
                          ],
                          Error: new Error()
                        };
                  }),
                read: (function (param) {
                    throw {
                          RE_EXN_ID: "Assert_failure",
                          _1: [
                            "json_encoding.ml",
                            505,
                            37
                          ],
                          Error: new Error()
                        };
                  })
              };
              var fake_self = {
                TAG: /* Custom */9,
                _0: fake_self_0,
                _1: fake_schema
              };
              var root = patch_description(match$6.title, match$6.description, schema$1(Curry._1(match$6.self, fake_self)));
              var match$8 = Json_schema.add_definition(definitions_path, name, root, sch.contents);
              sch.contents = match$8[0];
              return match$8[1];
          case /* Union */13 :
              var elements$2 = List.map((function (param) {
                      return schema$1(param._0.encoding);
                    }), t._0);
              return Json_schema.element({
                          TAG: /* Combine */3,
                          _0: /* One_of */1,
                          _1: elements$2
                        });
          
        }
      }
    };
  };
  var schema$2 = schema$1(encoding);
  return Json_schema.update(schema$2, sch.contents);
}

function req(title, description, n, t) {
  return {
          TAG: /* Req */0,
          _0: {
            name: n,
            encoding: t,
            title: title,
            description: description
          }
        };
}

function opt(title, description, n, t) {
  return {
          TAG: /* Opt */1,
          _0: {
            name: n,
            encoding: t,
            title: title,
            description: description
          }
        };
}

function dft(title, description, n, t, d) {
  return {
          TAG: /* Dft */2,
          _0: {
            name: n,
            encoding: t,
            title: title,
            description: description,
            default: d
          }
        };
}

function mu(name, title, description, self) {
  return {
          TAG: /* Mu */12,
          _0: {
            id: name,
            title: title,
            description: description,
            self: self
          }
        };
}

var $$int = {
  TAG: /* Int */2,
  _0: {
    int_name: "int",
    of_float: (function (prim) {
        return prim | 0;
      }),
    to_float: (function (prim) {
        return prim;
      }),
    lower_bound: -1073741824,
    upper_bound: 1073741823
  }
};

function ranged_int(lower_bound, upper_bound, name) {
  if (Sys.word_size === 64 && (lower_bound < -1073741824 || upper_bound > 1073741823)) {
    Pervasives.invalid_arg("Json_encoding.ranged_int: bounds out of portable int31 range");
  }
  return {
          TAG: /* Int */2,
          _0: {
            int_name: name,
            of_float: (function (prim) {
                return prim | 0;
              }),
            to_float: (function (prim) {
                return prim;
              }),
            lower_bound: lower_bound,
            upper_bound: upper_bound
          }
        };
}

var int53 = {
  TAG: /* Int */2,
  _0: {
    int_name: "int53",
    of_float: Caml_int64.of_float,
    to_float: Caml_int64.to_float,
    lower_bound: /* @__PURE__ */Caml_int64.mk(0, -2097152),
    upper_bound: /* @__PURE__ */Caml_int64.mk(0, 2097152)
  }
};

function ranged_int53(lower_bound, upper_bound, name) {
  if (Caml_int64.lt(lower_bound, /* @__PURE__ */Caml_int64.mk(0, -2097152)) || Caml_int64.gt(upper_bound, /* @__PURE__ */Caml_int64.mk(0, 2097152))) {
    Pervasives.invalid_arg("Json_encoding.ranged_int53: bounds out of JSON-representable integers");
  }
  return {
          TAG: /* Int */2,
          _0: {
            int_name: name,
            of_float: Caml_int64.of_float,
            to_float: Caml_int64.to_float,
            lower_bound: lower_bound,
            upper_bound: upper_bound
          }
        };
}

var int32 = {
  TAG: /* Int */2,
  _0: {
    int_name: "int32",
    of_float: (function (prim) {
        return prim | 0;
      }),
    to_float: (function (prim) {
        return prim;
      }),
    lower_bound: Int32.min_int,
    upper_bound: Int32.max_int
  }
};

function ranged_int32(lower_bound, upper_bound, name) {
  return {
          TAG: /* Int */2,
          _0: {
            int_name: name,
            of_float: (function (prim) {
                return prim | 0;
              }),
            to_float: (function (prim) {
                return prim;
              }),
            lower_bound: lower_bound,
            upper_bound: upper_bound
          }
        };
}

function ranged_float(minimum, maximum, float_name) {
  return {
          TAG: /* Float */3,
          _0: {
            float_name: float_name,
            minimum: minimum,
            maximum: maximum
          }
        };
}

function conv(ffrom, fto, schema, t) {
  return {
          TAG: /* Conv */10,
          _0: ffrom,
          _1: fto,
          _2: t,
          _3: schema
        };
}

var bytes = {
  TAG: /* Conv */10,
  _0: Bytes.to_string,
  _1: Bytes.of_string,
  _2: /* String */4,
  _3: undefined
};

function array(t) {
  return {
          TAG: /* Array */4,
          _0: t
        };
}

function obj1(f1) {
  return {
          TAG: /* Obj */5,
          _0: f1
        };
}

function obj2(f1, f2) {
  return {
          TAG: /* Objs */6,
          _0: {
            TAG: /* Obj */5,
            _0: f1
          },
          _1: {
            TAG: /* Obj */5,
            _0: f2
          }
        };
}

function obj3(f1, f2, f3) {
  return conv((function (param) {
                return [
                        param[0],
                        [
                          param[1],
                          param[2]
                        ]
                      ];
              }), (function (param) {
                var match = param[1];
                return [
                        param[0],
                        match[0],
                        match[1]
                      ];
              }), undefined, {
              TAG: /* Objs */6,
              _0: {
                TAG: /* Obj */5,
                _0: f1
              },
              _1: {
                TAG: /* Objs */6,
                _0: {
                  TAG: /* Obj */5,
                  _0: f2
                },
                _1: {
                  TAG: /* Obj */5,
                  _0: f3
                }
              }
            });
}

function obj4(f1, f2, f3, f4) {
  return conv((function (param) {
                return [
                        param[0],
                        [
                          param[1],
                          [
                            param[2],
                            param[3]
                          ]
                        ]
                      ];
              }), (function (param) {
                var match = param[1];
                var match$1 = match[1];
                return [
                        param[0],
                        match[0],
                        match$1[0],
                        match$1[1]
                      ];
              }), undefined, {
              TAG: /* Objs */6,
              _0: {
                TAG: /* Obj */5,
                _0: f1
              },
              _1: {
                TAG: /* Objs */6,
                _0: {
                  TAG: /* Obj */5,
                  _0: f2
                },
                _1: {
                  TAG: /* Objs */6,
                  _0: {
                    TAG: /* Obj */5,
                    _0: f3
                  },
                  _1: {
                    TAG: /* Obj */5,
                    _0: f4
                  }
                }
              }
            });
}

function obj5(f1, f2, f3, f4, f5) {
  return conv((function (param) {
                return [
                        param[0],
                        [
                          param[1],
                          [
                            param[2],
                            [
                              param[3],
                              param[4]
                            ]
                          ]
                        ]
                      ];
              }), (function (param) {
                var match = param[1];
                var match$1 = match[1];
                var match$2 = match$1[1];
                return [
                        param[0],
                        match[0],
                        match$1[0],
                        match$2[0],
                        match$2[1]
                      ];
              }), undefined, {
              TAG: /* Objs */6,
              _0: {
                TAG: /* Obj */5,
                _0: f1
              },
              _1: {
                TAG: /* Objs */6,
                _0: {
                  TAG: /* Obj */5,
                  _0: f2
                },
                _1: {
                  TAG: /* Objs */6,
                  _0: {
                    TAG: /* Obj */5,
                    _0: f3
                  },
                  _1: {
                    TAG: /* Objs */6,
                    _0: {
                      TAG: /* Obj */5,
                      _0: f4
                    },
                    _1: {
                      TAG: /* Obj */5,
                      _0: f5
                    }
                  }
                }
              }
            });
}

function obj6(f1, f2, f3, f4, f5, f6) {
  return conv((function (param) {
                return [
                        param[0],
                        [
                          param[1],
                          [
                            param[2],
                            [
                              param[3],
                              [
                                param[4],
                                param[5]
                              ]
                            ]
                          ]
                        ]
                      ];
              }), (function (param) {
                var match = param[1];
                var match$1 = match[1];
                var match$2 = match$1[1];
                var match$3 = match$2[1];
                return [
                        param[0],
                        match[0],
                        match$1[0],
                        match$2[0],
                        match$3[0],
                        match$3[1]
                      ];
              }), undefined, {
              TAG: /* Objs */6,
              _0: {
                TAG: /* Obj */5,
                _0: f1
              },
              _1: {
                TAG: /* Objs */6,
                _0: {
                  TAG: /* Obj */5,
                  _0: f2
                },
                _1: {
                  TAG: /* Objs */6,
                  _0: {
                    TAG: /* Obj */5,
                    _0: f3
                  },
                  _1: {
                    TAG: /* Objs */6,
                    _0: {
                      TAG: /* Obj */5,
                      _0: f4
                    },
                    _1: {
                      TAG: /* Objs */6,
                      _0: {
                        TAG: /* Obj */5,
                        _0: f5
                      },
                      _1: {
                        TAG: /* Obj */5,
                        _0: f6
                      }
                    }
                  }
                }
              }
            });
}

function obj7(f1, f2, f3, f4, f5, f6, f7) {
  var rest_0 = {
    TAG: /* Obj */5,
    _0: f6
  };
  var rest_1 = {
    TAG: /* Obj */5,
    _0: f7
  };
  var rest = {
    TAG: /* Objs */6,
    _0: rest_0,
    _1: rest_1
  };
  return conv((function (param) {
                return [
                        param[0],
                        [
                          param[1],
                          [
                            param[2],
                            [
                              param[3],
                              [
                                param[4],
                                [
                                  param[5],
                                  param[6]
                                ]
                              ]
                            ]
                          ]
                        ]
                      ];
              }), (function (param) {
                var match = param[1];
                var match$1 = match[1];
                var match$2 = match$1[1];
                var match$3 = match$2[1];
                var match$4 = match$3[1];
                return [
                        param[0],
                        match[0],
                        match$1[0],
                        match$2[0],
                        match$3[0],
                        match$4[0],
                        match$4[1]
                      ];
              }), undefined, {
              TAG: /* Objs */6,
              _0: {
                TAG: /* Obj */5,
                _0: f1
              },
              _1: {
                TAG: /* Objs */6,
                _0: {
                  TAG: /* Obj */5,
                  _0: f2
                },
                _1: {
                  TAG: /* Objs */6,
                  _0: {
                    TAG: /* Obj */5,
                    _0: f3
                  },
                  _1: {
                    TAG: /* Objs */6,
                    _0: {
                      TAG: /* Obj */5,
                      _0: f4
                    },
                    _1: {
                      TAG: /* Objs */6,
                      _0: {
                        TAG: /* Obj */5,
                        _0: f5
                      },
                      _1: rest
                    }
                  }
                }
              }
            });
}

function obj8(f1, f2, f3, f4, f5, f6, f7, f8) {
  var rest_0 = {
    TAG: /* Obj */5,
    _0: f6
  };
  var rest_1 = {
    TAG: /* Objs */6,
    _0: {
      TAG: /* Obj */5,
      _0: f7
    },
    _1: {
      TAG: /* Obj */5,
      _0: f8
    }
  };
  var rest = {
    TAG: /* Objs */6,
    _0: rest_0,
    _1: rest_1
  };
  return conv((function (param) {
                return [
                        param[0],
                        [
                          param[1],
                          [
                            param[2],
                            [
                              param[3],
                              [
                                param[4],
                                [
                                  param[5],
                                  [
                                    param[6],
                                    param[7]
                                  ]
                                ]
                              ]
                            ]
                          ]
                        ]
                      ];
              }), (function (param) {
                var match = param[1];
                var match$1 = match[1];
                var match$2 = match$1[1];
                var match$3 = match$2[1];
                var match$4 = match$3[1];
                var match$5 = match$4[1];
                return [
                        param[0],
                        match[0],
                        match$1[0],
                        match$2[0],
                        match$3[0],
                        match$4[0],
                        match$5[0],
                        match$5[1]
                      ];
              }), undefined, {
              TAG: /* Objs */6,
              _0: {
                TAG: /* Obj */5,
                _0: f1
              },
              _1: {
                TAG: /* Objs */6,
                _0: {
                  TAG: /* Obj */5,
                  _0: f2
                },
                _1: {
                  TAG: /* Objs */6,
                  _0: {
                    TAG: /* Obj */5,
                    _0: f3
                  },
                  _1: {
                    TAG: /* Objs */6,
                    _0: {
                      TAG: /* Obj */5,
                      _0: f4
                    },
                    _1: {
                      TAG: /* Objs */6,
                      _0: {
                        TAG: /* Obj */5,
                        _0: f5
                      },
                      _1: rest
                    }
                  }
                }
              }
            });
}

function obj9(f1, f2, f3, f4, f5, f6, f7, f8, f9) {
  var rest_0 = {
    TAG: /* Obj */5,
    _0: f6
  };
  var rest_1 = {
    TAG: /* Objs */6,
    _0: {
      TAG: /* Obj */5,
      _0: f7
    },
    _1: {
      TAG: /* Objs */6,
      _0: {
        TAG: /* Obj */5,
        _0: f8
      },
      _1: {
        TAG: /* Obj */5,
        _0: f9
      }
    }
  };
  var rest = {
    TAG: /* Objs */6,
    _0: rest_0,
    _1: rest_1
  };
  return conv((function (param) {
                return [
                        param[0],
                        [
                          param[1],
                          [
                            param[2],
                            [
                              param[3],
                              [
                                param[4],
                                [
                                  param[5],
                                  [
                                    param[6],
                                    [
                                      param[7],
                                      param[8]
                                    ]
                                  ]
                                ]
                              ]
                            ]
                          ]
                        ]
                      ];
              }), (function (param) {
                var match = param[1];
                var match$1 = match[1];
                var match$2 = match$1[1];
                var match$3 = match$2[1];
                var match$4 = match$3[1];
                var match$5 = match$4[1];
                var match$6 = match$5[1];
                return [
                        param[0],
                        match[0],
                        match$1[0],
                        match$2[0],
                        match$3[0],
                        match$4[0],
                        match$5[0],
                        match$6[0],
                        match$6[1]
                      ];
              }), undefined, {
              TAG: /* Objs */6,
              _0: {
                TAG: /* Obj */5,
                _0: f1
              },
              _1: {
                TAG: /* Objs */6,
                _0: {
                  TAG: /* Obj */5,
                  _0: f2
                },
                _1: {
                  TAG: /* Objs */6,
                  _0: {
                    TAG: /* Obj */5,
                    _0: f3
                  },
                  _1: {
                    TAG: /* Objs */6,
                    _0: {
                      TAG: /* Obj */5,
                      _0: f4
                    },
                    _1: {
                      TAG: /* Objs */6,
                      _0: {
                        TAG: /* Obj */5,
                        _0: f5
                      },
                      _1: rest
                    }
                  }
                }
              }
            });
}

function obj10(f1, f2, f3, f4, f5, f6, f7, f8, f9, f10) {
  var rest_0 = {
    TAG: /* Obj */5,
    _0: f6
  };
  var rest_1 = {
    TAG: /* Objs */6,
    _0: {
      TAG: /* Obj */5,
      _0: f7
    },
    _1: {
      TAG: /* Objs */6,
      _0: {
        TAG: /* Obj */5,
        _0: f8
      },
      _1: {
        TAG: /* Objs */6,
        _0: {
          TAG: /* Obj */5,
          _0: f9
        },
        _1: {
          TAG: /* Obj */5,
          _0: f10
        }
      }
    }
  };
  var rest = {
    TAG: /* Objs */6,
    _0: rest_0,
    _1: rest_1
  };
  return conv((function (param) {
                return [
                        param[0],
                        [
                          param[1],
                          [
                            param[2],
                            [
                              param[3],
                              [
                                param[4],
                                [
                                  param[5],
                                  [
                                    param[6],
                                    [
                                      param[7],
                                      [
                                        param[8],
                                        param[9]
                                      ]
                                    ]
                                  ]
                                ]
                              ]
                            ]
                          ]
                        ]
                      ];
              }), (function (param) {
                var match = param[1];
                var match$1 = match[1];
                var match$2 = match$1[1];
                var match$3 = match$2[1];
                var match$4 = match$3[1];
                var match$5 = match$4[1];
                var match$6 = match$5[1];
                var match$7 = match$6[1];
                return [
                        param[0],
                        match[0],
                        match$1[0],
                        match$2[0],
                        match$3[0],
                        match$4[0],
                        match$5[0],
                        match$6[0],
                        match$7[0],
                        match$7[1]
                      ];
              }), undefined, {
              TAG: /* Objs */6,
              _0: {
                TAG: /* Obj */5,
                _0: f1
              },
              _1: {
                TAG: /* Objs */6,
                _0: {
                  TAG: /* Obj */5,
                  _0: f2
                },
                _1: {
                  TAG: /* Objs */6,
                  _0: {
                    TAG: /* Obj */5,
                    _0: f3
                  },
                  _1: {
                    TAG: /* Objs */6,
                    _0: {
                      TAG: /* Obj */5,
                      _0: f4
                    },
                    _1: {
                      TAG: /* Objs */6,
                      _0: {
                        TAG: /* Obj */5,
                        _0: f5
                      },
                      _1: rest
                    }
                  }
                }
              }
            });
}

function tup1(f1) {
  return {
          TAG: /* Tup */7,
          _0: f1
        };
}

function tup2(f1, f2) {
  return {
          TAG: /* Tups */8,
          _0: {
            TAG: /* Tup */7,
            _0: f1
          },
          _1: {
            TAG: /* Tup */7,
            _0: f2
          }
        };
}

function tup3(f1, f2, f3) {
  return conv((function (param) {
                return [
                        param[0],
                        [
                          param[1],
                          param[2]
                        ]
                      ];
              }), (function (param) {
                var match = param[1];
                return [
                        param[0],
                        match[0],
                        match[1]
                      ];
              }), undefined, {
              TAG: /* Tups */8,
              _0: {
                TAG: /* Tup */7,
                _0: f1
              },
              _1: {
                TAG: /* Tups */8,
                _0: {
                  TAG: /* Tup */7,
                  _0: f2
                },
                _1: {
                  TAG: /* Tup */7,
                  _0: f3
                }
              }
            });
}

function tup4(f1, f2, f3, f4) {
  return conv((function (param) {
                return [
                        param[0],
                        [
                          param[1],
                          [
                            param[2],
                            param[3]
                          ]
                        ]
                      ];
              }), (function (param) {
                var match = param[1];
                var match$1 = match[1];
                return [
                        param[0],
                        match[0],
                        match$1[0],
                        match$1[1]
                      ];
              }), undefined, {
              TAG: /* Tups */8,
              _0: {
                TAG: /* Tup */7,
                _0: f1
              },
              _1: {
                TAG: /* Tups */8,
                _0: {
                  TAG: /* Tup */7,
                  _0: f2
                },
                _1: {
                  TAG: /* Tups */8,
                  _0: {
                    TAG: /* Tup */7,
                    _0: f3
                  },
                  _1: {
                    TAG: /* Tup */7,
                    _0: f4
                  }
                }
              }
            });
}

function tup5(f1, f2, f3, f4, f5) {
  return conv((function (param) {
                return [
                        param[0],
                        [
                          param[1],
                          [
                            param[2],
                            [
                              param[3],
                              param[4]
                            ]
                          ]
                        ]
                      ];
              }), (function (param) {
                var match = param[1];
                var match$1 = match[1];
                var match$2 = match$1[1];
                return [
                        param[0],
                        match[0],
                        match$1[0],
                        match$2[0],
                        match$2[1]
                      ];
              }), undefined, {
              TAG: /* Tups */8,
              _0: {
                TAG: /* Tup */7,
                _0: f1
              },
              _1: {
                TAG: /* Tups */8,
                _0: {
                  TAG: /* Tup */7,
                  _0: f2
                },
                _1: {
                  TAG: /* Tups */8,
                  _0: {
                    TAG: /* Tup */7,
                    _0: f3
                  },
                  _1: {
                    TAG: /* Tups */8,
                    _0: {
                      TAG: /* Tup */7,
                      _0: f4
                    },
                    _1: {
                      TAG: /* Tup */7,
                      _0: f5
                    }
                  }
                }
              }
            });
}

function tup6(f1, f2, f3, f4, f5, f6) {
  return conv((function (param) {
                return [
                        param[0],
                        [
                          param[1],
                          [
                            param[2],
                            [
                              param[3],
                              [
                                param[4],
                                param[5]
                              ]
                            ]
                          ]
                        ]
                      ];
              }), (function (param) {
                var match = param[1];
                var match$1 = match[1];
                var match$2 = match$1[1];
                var match$3 = match$2[1];
                return [
                        param[0],
                        match[0],
                        match$1[0],
                        match$2[0],
                        match$3[0],
                        match$3[1]
                      ];
              }), undefined, {
              TAG: /* Tups */8,
              _0: {
                TAG: /* Tup */7,
                _0: f1
              },
              _1: {
                TAG: /* Tups */8,
                _0: {
                  TAG: /* Tup */7,
                  _0: f2
                },
                _1: {
                  TAG: /* Tups */8,
                  _0: {
                    TAG: /* Tup */7,
                    _0: f3
                  },
                  _1: {
                    TAG: /* Tups */8,
                    _0: {
                      TAG: /* Tup */7,
                      _0: f4
                    },
                    _1: {
                      TAG: /* Tups */8,
                      _0: {
                        TAG: /* Tup */7,
                        _0: f5
                      },
                      _1: {
                        TAG: /* Tup */7,
                        _0: f6
                      }
                    }
                  }
                }
              }
            });
}

function tup7(f1, f2, f3, f4, f5, f6, f7) {
  var rest_0 = {
    TAG: /* Tup */7,
    _0: f6
  };
  var rest_1 = {
    TAG: /* Tup */7,
    _0: f7
  };
  var rest = {
    TAG: /* Tups */8,
    _0: rest_0,
    _1: rest_1
  };
  return conv((function (param) {
                return [
                        param[0],
                        [
                          param[1],
                          [
                            param[2],
                            [
                              param[3],
                              [
                                param[4],
                                [
                                  param[5],
                                  param[6]
                                ]
                              ]
                            ]
                          ]
                        ]
                      ];
              }), (function (param) {
                var match = param[1];
                var match$1 = match[1];
                var match$2 = match$1[1];
                var match$3 = match$2[1];
                var match$4 = match$3[1];
                return [
                        param[0],
                        match[0],
                        match$1[0],
                        match$2[0],
                        match$3[0],
                        match$4[0],
                        match$4[1]
                      ];
              }), undefined, {
              TAG: /* Tups */8,
              _0: {
                TAG: /* Tup */7,
                _0: f1
              },
              _1: {
                TAG: /* Tups */8,
                _0: {
                  TAG: /* Tup */7,
                  _0: f2
                },
                _1: {
                  TAG: /* Tups */8,
                  _0: {
                    TAG: /* Tup */7,
                    _0: f3
                  },
                  _1: {
                    TAG: /* Tups */8,
                    _0: {
                      TAG: /* Tup */7,
                      _0: f4
                    },
                    _1: {
                      TAG: /* Tups */8,
                      _0: {
                        TAG: /* Tup */7,
                        _0: f5
                      },
                      _1: rest
                    }
                  }
                }
              }
            });
}

function tup8(f1, f2, f3, f4, f5, f6, f7, f8) {
  var rest_0 = {
    TAG: /* Tup */7,
    _0: f6
  };
  var rest_1 = {
    TAG: /* Tups */8,
    _0: {
      TAG: /* Tup */7,
      _0: f7
    },
    _1: {
      TAG: /* Tup */7,
      _0: f8
    }
  };
  var rest = {
    TAG: /* Tups */8,
    _0: rest_0,
    _1: rest_1
  };
  return conv((function (param) {
                return [
                        param[0],
                        [
                          param[1],
                          [
                            param[2],
                            [
                              param[3],
                              [
                                param[4],
                                [
                                  param[5],
                                  [
                                    param[6],
                                    param[7]
                                  ]
                                ]
                              ]
                            ]
                          ]
                        ]
                      ];
              }), (function (param) {
                var match = param[1];
                var match$1 = match[1];
                var match$2 = match$1[1];
                var match$3 = match$2[1];
                var match$4 = match$3[1];
                var match$5 = match$4[1];
                return [
                        param[0],
                        match[0],
                        match$1[0],
                        match$2[0],
                        match$3[0],
                        match$4[0],
                        match$5[0],
                        match$5[1]
                      ];
              }), undefined, {
              TAG: /* Tups */8,
              _0: {
                TAG: /* Tup */7,
                _0: f1
              },
              _1: {
                TAG: /* Tups */8,
                _0: {
                  TAG: /* Tup */7,
                  _0: f2
                },
                _1: {
                  TAG: /* Tups */8,
                  _0: {
                    TAG: /* Tup */7,
                    _0: f3
                  },
                  _1: {
                    TAG: /* Tups */8,
                    _0: {
                      TAG: /* Tup */7,
                      _0: f4
                    },
                    _1: {
                      TAG: /* Tups */8,
                      _0: {
                        TAG: /* Tup */7,
                        _0: f5
                      },
                      _1: rest
                    }
                  }
                }
              }
            });
}

function tup9(f1, f2, f3, f4, f5, f6, f7, f8, f9) {
  var rest_0 = {
    TAG: /* Tup */7,
    _0: f6
  };
  var rest_1 = {
    TAG: /* Tups */8,
    _0: {
      TAG: /* Tup */7,
      _0: f7
    },
    _1: {
      TAG: /* Tups */8,
      _0: {
        TAG: /* Tup */7,
        _0: f8
      },
      _1: {
        TAG: /* Tup */7,
        _0: f9
      }
    }
  };
  var rest = {
    TAG: /* Tups */8,
    _0: rest_0,
    _1: rest_1
  };
  return conv((function (param) {
                return [
                        param[0],
                        [
                          param[1],
                          [
                            param[2],
                            [
                              param[3],
                              [
                                param[4],
                                [
                                  param[5],
                                  [
                                    param[6],
                                    [
                                      param[7],
                                      param[8]
                                    ]
                                  ]
                                ]
                              ]
                            ]
                          ]
                        ]
                      ];
              }), (function (param) {
                var match = param[1];
                var match$1 = match[1];
                var match$2 = match$1[1];
                var match$3 = match$2[1];
                var match$4 = match$3[1];
                var match$5 = match$4[1];
                var match$6 = match$5[1];
                return [
                        param[0],
                        match[0],
                        match$1[0],
                        match$2[0],
                        match$3[0],
                        match$4[0],
                        match$5[0],
                        match$6[0],
                        match$6[1]
                      ];
              }), undefined, {
              TAG: /* Tups */8,
              _0: {
                TAG: /* Tup */7,
                _0: f1
              },
              _1: {
                TAG: /* Tups */8,
                _0: {
                  TAG: /* Tup */7,
                  _0: f2
                },
                _1: {
                  TAG: /* Tups */8,
                  _0: {
                    TAG: /* Tup */7,
                    _0: f3
                  },
                  _1: {
                    TAG: /* Tups */8,
                    _0: {
                      TAG: /* Tup */7,
                      _0: f4
                    },
                    _1: {
                      TAG: /* Tups */8,
                      _0: {
                        TAG: /* Tup */7,
                        _0: f5
                      },
                      _1: rest
                    }
                  }
                }
              }
            });
}

function tup10(f1, f2, f3, f4, f5, f6, f7, f8, f9, f10) {
  var rest_0 = {
    TAG: /* Tup */7,
    _0: f6
  };
  var rest_1 = {
    TAG: /* Tups */8,
    _0: {
      TAG: /* Tup */7,
      _0: f7
    },
    _1: {
      TAG: /* Tups */8,
      _0: {
        TAG: /* Tup */7,
        _0: f8
      },
      _1: {
        TAG: /* Tups */8,
        _0: {
          TAG: /* Tup */7,
          _0: f9
        },
        _1: {
          TAG: /* Tup */7,
          _0: f10
        }
      }
    }
  };
  var rest = {
    TAG: /* Tups */8,
    _0: rest_0,
    _1: rest_1
  };
  return conv((function (param) {
                return [
                        param[0],
                        [
                          param[1],
                          [
                            param[2],
                            [
                              param[3],
                              [
                                param[4],
                                [
                                  param[5],
                                  [
                                    param[6],
                                    [
                                      param[7],
                                      [
                                        param[8],
                                        param[9]
                                      ]
                                    ]
                                  ]
                                ]
                              ]
                            ]
                          ]
                        ]
                      ];
              }), (function (param) {
                var match = param[1];
                var match$1 = match[1];
                var match$2 = match$1[1];
                var match$3 = match$2[1];
                var match$4 = match$3[1];
                var match$5 = match$4[1];
                var match$6 = match$5[1];
                var match$7 = match$6[1];
                return [
                        param[0],
                        match[0],
                        match$1[0],
                        match$2[0],
                        match$3[0],
                        match$4[0],
                        match$5[0],
                        match$6[0],
                        match$7[0],
                        match$7[1]
                      ];
              }), undefined, {
              TAG: /* Tups */8,
              _0: {
                TAG: /* Tup */7,
                _0: f1
              },
              _1: {
                TAG: /* Tups */8,
                _0: {
                  TAG: /* Tup */7,
                  _0: f2
                },
                _1: {
                  TAG: /* Tups */8,
                  _0: {
                    TAG: /* Tup */7,
                    _0: f3
                  },
                  _1: {
                    TAG: /* Tups */8,
                    _0: {
                      TAG: /* Tup */7,
                      _0: f4
                    },
                    _1: {
                      TAG: /* Tups */8,
                      _0: {
                        TAG: /* Tup */7,
                        _0: f5
                      },
                      _1: rest
                    }
                  }
                }
              }
            });
}

function repr_agnostic_custom(param, schema) {
  return {
          TAG: /* Custom */9,
          _0: {
            write: param.write,
            read: param.read
          },
          _1: schema
        };
}

function constant(s) {
  return {
          TAG: /* Constant */1,
          _0: s
        };
}

function def(id, title, description, encoding) {
  return {
          TAG: /* Describe */11,
          _0: {
            id: id,
            title: title,
            description: description,
            encoding: encoding
          }
        };
}

function is_nullable(_cases) {
  while(true) {
    var cases = _cases;
    if (typeof cases === "number") {
      switch (cases) {
        case /* Null */0 :
        case /* Ignore */2 :
            return true;
        default:
          return false;
      }
    } else {
      switch (cases.TAG | 0) {
        case /* Option */0 :
            return true;
        case /* Custom */9 :
            return Json_schema.is_nullable(cases._1);
        case /* Conv */10 :
            _cases = cases._2;
            continue ;
        case /* Describe */11 :
            _cases = cases._0.encoding;
            continue ;
        case /* Mu */12 :
            _cases = Curry._1(cases._0.self, cases);
            continue ;
        case /* Union */13 :
            return List.exists((function (param) {
                          return is_nullable(param._0.encoding);
                        }), cases._0);
        default:
          return false;
      }
    }
  };
}

function option(t) {
  if (is_nullable(t)) {
    Pervasives.invalid_arg("Json_encoding.option: cannot nest nullable encodings");
  }
  return {
          TAG: /* Option */0,
          _0: t
        };
}

var read = Json_repr.repr_to_any;

var write = Json_repr.any_to_repr;

var any_value_0 = {
  write: write,
  read: read
};

var any_value = {
  TAG: /* Custom */9,
  _0: any_value_0,
  _1: Json_schema.any
};

function read$1(repr, v) {
  return Json_repr.convert(repr, Json_repr.Ezjsonm, v);
}

function write$1(repr, v) {
  return Json_repr.convert(Json_repr.Ezjsonm, repr, v);
}

var any_ezjson_value_0 = {
  write: write$1,
  read: read$1
};

var any_ezjson_value = {
  TAG: /* Custom */9,
  _0: any_ezjson_value_0,
  _1: Json_schema.any
};

function read$2(Repr, v) {
  var k = Curry._1(Repr.view, v);
  if (typeof k === "string") {
    throw unexpected(k, "array or object");
  }
  var variant = k.NAME;
  if (variant === "O" || variant === "A") {
    return Json_repr.repr_to_any(Repr, v);
  }
  throw unexpected(k, "array or object");
}

var write$2 = Json_repr.any_to_repr;

var any_document_0 = {
  write: write$2,
  read: read$2
};

var any_document = {
  TAG: /* Custom */9,
  _0: any_document_0,
  _1: Json_schema.any
};

var any_schema = custom(Json_schema.to_json, (function (j) {
        try {
          return Json_schema.of_json(j);
        }
        catch (raw_err){
          var err = Caml_js_exceptions.internalToOCamlException(raw_err);
          throw {
                RE_EXN_ID: Cannot_destruct,
                _1: [
                  /* [] */0,
                  {
                    RE_EXN_ID: Bad_schema,
                    _1: err
                  }
                ],
                Error: new Error()
              };
        }
      }), Json_schema.self);

function merge_tups(t1, t2) {
  var is_tup = function (_enc) {
    while(true) {
      var enc = _enc;
      if (typeof enc === "number") {
        return false;
      }
      switch (enc.TAG | 0) {
        case /* Tup */7 :
        case /* Tups */8 :
            return true;
        case /* Conv */10 :
            if (enc._3 !== undefined) {
              return false;
            }
            _enc = enc._2;
            continue ;
        case /* Describe */11 :
            _enc = enc._0.encoding;
            continue ;
        case /* Mu */12 :
            _enc = Curry._1(enc._0.self, enc);
            continue ;
        default:
          return false;
      }
    };
  };
  if (is_tup(t1) && is_tup(t2)) {
    return {
            TAG: /* Tups */8,
            _0: t1,
            _1: t2
          };
  } else {
    return Pervasives.invalid_arg("Json_encoding.merge_tups");
  }
}

function list(t) {
  return {
          TAG: /* Conv */10,
          _0: $$Array.of_list,
          _1: $$Array.to_list,
          _2: {
            TAG: /* Array */4,
            _0: t
          },
          _3: undefined
        };
}

function merge_objs(o1, o2) {
  var is_obj = function (_cases) {
    while(true) {
      var cases = _cases;
      if (typeof cases === "number") {
        switch (cases) {
          case /* Empty */1 :
          case /* Ignore */2 :
              return true;
          default:
            return false;
        }
      } else {
        switch (cases.TAG | 0) {
          case /* Obj */5 :
          case /* Objs */6 :
              return true;
          case /* Conv */10 :
              if (cases._3 !== undefined) {
                return false;
              }
              _cases = cases._2;
              continue ;
          case /* Describe */11 :
              _cases = cases._0.encoding;
              continue ;
          case /* Mu */12 :
              _cases = Curry._1(cases._0.self, cases);
              continue ;
          case /* Union */13 :
              return List.for_all((function (param) {
                            return is_obj(param._0.encoding);
                          }), cases._0);
          default:
            return false;
        }
      }
    };
  };
  if (is_obj(o1) && is_obj(o2)) {
    return {
            TAG: /* Objs */6,
            _0: o1,
            _1: o2
          };
  } else {
    return Pervasives.invalid_arg("Json_encoding.merge_objs");
  }
}

function $$case(encoding, proj, inj) {
  return /* Case */{
          _0: {
            encoding: encoding,
            proj: proj,
            inj: inj
          }
        };
}

function union(cases) {
  if (cases) {
    return {
            TAG: /* Union */13,
            _0: cases
          };
  } else {
    return Pervasives.invalid_arg("Json_encoding.union");
  }
}

function print_error(print_unknown, ppf, _errs) {
  while(true) {
    var errs = _errs;
    if (errs.RE_EXN_ID === Cannot_destruct) {
      var match = errs._1;
      var path = match[0];
      if (path) {
        var errs$1 = match[1];
        if (errs$1.RE_EXN_ID === Unexpected) {
          var partial_arg = true;
          return Curry._4(Format.fprintf(ppf, /* Format */{
                          _0: {
                            TAG: /* String_literal */11,
                            _0: "At ",
                            _1: {
                              TAG: /* Alpha */15,
                              _0: {
                                TAG: /* String_literal */11,
                                _0: ", unexpected ",
                                _1: {
                                  TAG: /* String */2,
                                  _0: /* No_padding */0,
                                  _1: {
                                    TAG: /* String_literal */11,
                                    _0: " instead of ",
                                    _1: {
                                      TAG: /* String */2,
                                      _0: /* No_padding */0,
                                      _1: /* End_of_format */0
                                    }
                                  }
                                }
                              }
                            }
                          },
                          _1: "At %a, unexpected %s instead of %s"
                        }), (function(partial_arg){
                    return function (param, param$1) {
                      return Json_query.print_path_as_json_path(partial_arg, param, param$1);
                    }
                    }(partial_arg)), path, errs$1._1, errs$1._2);
        }
        if (errs$1.RE_EXN_ID === No_case_matched) {
          var partial_arg$1 = true;
          return Curry._4(Format.fprintf(ppf, /* Format */{
                          _0: {
                            TAG: /* Formatting_gen */18,
                            _0: {
                              TAG: /* Open_box */1,
                              _0: /* Format */{
                                _0: {
                                  TAG: /* String_literal */11,
                                  _0: "<v 2>",
                                  _1: /* End_of_format */0
                                },
                                _1: "<v 2>"
                              }
                            },
                            _1: {
                              TAG: /* String_literal */11,
                              _0: "At ",
                              _1: {
                                TAG: /* Alpha */15,
                                _0: {
                                  TAG: /* String_literal */11,
                                  _0: ", no case matched:",
                                  _1: {
                                    TAG: /* Formatting_lit */17,
                                    _0: {
                                      TAG: /* Break */0,
                                      _0: "@,",
                                      _1: 0,
                                      _2: 0
                                    },
                                    _1: {
                                      TAG: /* Alpha */15,
                                      _0: {
                                        TAG: /* Formatting_lit */17,
                                        _0: /* Close_box */0,
                                        _1: /* End_of_format */0
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          _1: "@[<v 2>At %a, no case matched:@,%a@]"
                        }), (function(partial_arg$1){
                    return function (param, param$1) {
                      return Json_query.print_path_as_json_path(partial_arg$1, param, param$1);
                    }
                    }(partial_arg$1)), path, (function (param, param$1) {
                        return Format.pp_print_list(undefined, (function (param, param$1) {
                                      return print_error(print_unknown, param, param$1);
                                    }), param, param$1);
                      }), errs$1._1);
        }
        if (errs$1.RE_EXN_ID === Bad_array_size) {
          var partial_arg$2 = true;
          return Curry._4(Format.fprintf(ppf, /* Format */{
                          _0: {
                            TAG: /* String_literal */11,
                            _0: "At ",
                            _1: {
                              TAG: /* Alpha */15,
                              _0: {
                                TAG: /* String_literal */11,
                                _0: ", unexpected array of size ",
                                _1: {
                                  TAG: /* Int */4,
                                  _0: /* Int_d */0,
                                  _1: /* No_padding */0,
                                  _2: /* No_precision */0,
                                  _3: {
                                    TAG: /* String_literal */11,
                                    _0: " instead of ",
                                    _1: {
                                      TAG: /* Int */4,
                                      _0: /* Int_d */0,
                                      _1: /* No_padding */0,
                                      _2: /* No_precision */0,
                                      _3: /* End_of_format */0
                                    }
                                  }
                                }
                              }
                            }
                          },
                          _1: "At %a, unexpected array of size %d instead of %d"
                        }), (function(partial_arg$2){
                    return function (param, param$1) {
                      return Json_query.print_path_as_json_path(partial_arg$2, param, param$1);
                    }
                    }(partial_arg$2)), path, errs$1._1, errs$1._2);
        }
        if (errs$1.RE_EXN_ID === Missing_field) {
          var partial_arg$3 = true;
          return Curry._3(Format.fprintf(ppf, /* Format */{
                          _0: {
                            TAG: /* String_literal */11,
                            _0: "At ",
                            _1: {
                              TAG: /* Alpha */15,
                              _0: {
                                TAG: /* String_literal */11,
                                _0: ", missing object field ",
                                _1: {
                                  TAG: /* String */2,
                                  _0: /* No_padding */0,
                                  _1: /* End_of_format */0
                                }
                              }
                            }
                          },
                          _1: "At %a, missing object field %s"
                        }), (function(partial_arg$3){
                    return function (param, param$1) {
                      return Json_query.print_path_as_json_path(partial_arg$3, param, param$1);
                    }
                    }(partial_arg$3)), path, errs$1._1);
        }
        if (errs$1.RE_EXN_ID === Unexpected_field) {
          var partial_arg$4 = true;
          return Curry._3(Format.fprintf(ppf, /* Format */{
                          _0: {
                            TAG: /* String_literal */11,
                            _0: "At ",
                            _1: {
                              TAG: /* Alpha */15,
                              _0: {
                                TAG: /* String_literal */11,
                                _0: ", unexpected object field ",
                                _1: {
                                  TAG: /* String */2,
                                  _0: /* No_padding */0,
                                  _1: /* End_of_format */0
                                }
                              }
                            }
                          },
                          _1: "At %a, unexpected object field %s"
                        }), (function(partial_arg$4){
                    return function (param, param$1) {
                      return Json_query.print_path_as_json_path(partial_arg$4, param, param$1);
                    }
                    }(partial_arg$4)), path, errs$1._1);
        }
        if (errs$1.RE_EXN_ID === Bad_schema) {
          var partial_arg$5 = true;
          return Curry._4(Format.fprintf(ppf, /* Format */{
                          _0: {
                            TAG: /* Formatting_gen */18,
                            _0: {
                              TAG: /* Open_box */1,
                              _0: /* Format */{
                                _0: {
                                  TAG: /* String_literal */11,
                                  _0: "<v 2>",
                                  _1: /* End_of_format */0
                                },
                                _1: "<v 2>"
                              }
                            },
                            _1: {
                              TAG: /* String_literal */11,
                              _0: "At ",
                              _1: {
                                TAG: /* Alpha */15,
                                _0: {
                                  TAG: /* String_literal */11,
                                  _0: ", bad custom schema:",
                                  _1: {
                                    TAG: /* Formatting_lit */17,
                                    _0: {
                                      TAG: /* Break */0,
                                      _0: "@,",
                                      _1: 0,
                                      _2: 0
                                    },
                                    _1: {
                                      TAG: /* Alpha */15,
                                      _0: {
                                        TAG: /* Formatting_lit */17,
                                        _0: /* Close_box */0,
                                        _1: /* End_of_format */0
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          _1: "@[<v 2>At %a, bad custom schema:@,%a@]"
                        }), (function(partial_arg$5){
                    return function (param, param$1) {
                      return Json_query.print_path_as_json_path(partial_arg$5, param, param$1);
                    }
                    }(partial_arg$5)), path, (function (param, param$1) {
                        return print_error(print_unknown, param, param$1);
                      }), errs$1._1);
        }
        
      } else {
        _errs = match[1];
        continue ;
      }
    } else if (errs.RE_EXN_ID === Unexpected) {
      return Curry._2(Format.fprintf(ppf, /* Format */{
                      _0: {
                        TAG: /* String_literal */11,
                        _0: "Unexpected ",
                        _1: {
                          TAG: /* String */2,
                          _0: /* No_padding */0,
                          _1: {
                            TAG: /* String_literal */11,
                            _0: " instead of ",
                            _1: {
                              TAG: /* String */2,
                              _0: /* No_padding */0,
                              _1: /* End_of_format */0
                            }
                          }
                        }
                      },
                      _1: "Unexpected %s instead of %s"
                    }), errs._1, errs._2);
    }
    if (errs.RE_EXN_ID === No_case_matched) {
      return Curry._2(Format.fprintf(ppf, /* Format */{
                      _0: {
                        TAG: /* Formatting_gen */18,
                        _0: {
                          TAG: /* Open_box */1,
                          _0: /* Format */{
                            _0: {
                              TAG: /* String_literal */11,
                              _0: "<v 2>",
                              _1: /* End_of_format */0
                            },
                            _1: "<v 2>"
                          }
                        },
                        _1: {
                          TAG: /* String_literal */11,
                          _0: "No case matched:",
                          _1: {
                            TAG: /* Formatting_lit */17,
                            _0: {
                              TAG: /* Break */0,
                              _0: "@,",
                              _1: 0,
                              _2: 0
                            },
                            _1: {
                              TAG: /* Alpha */15,
                              _0: {
                                TAG: /* Formatting_lit */17,
                                _0: /* Close_box */0,
                                _1: /* End_of_format */0
                              }
                            }
                          }
                        }
                      },
                      _1: "@[<v 2>No case matched:@,%a@]"
                    }), (function (param, param$1) {
                    return Format.pp_print_list(undefined, (function (param, param$1) {
                                  return print_error(print_unknown, param, param$1);
                                }), param, param$1);
                  }), errs._1);
    }
    if (errs.RE_EXN_ID === Bad_array_size) {
      return Curry._2(Format.fprintf(ppf, /* Format */{
                      _0: {
                        TAG: /* String_literal */11,
                        _0: "Unexpected array of size ",
                        _1: {
                          TAG: /* Int */4,
                          _0: /* Int_d */0,
                          _1: /* No_padding */0,
                          _2: /* No_precision */0,
                          _3: {
                            TAG: /* String_literal */11,
                            _0: " instead of ",
                            _1: {
                              TAG: /* Int */4,
                              _0: /* Int_d */0,
                              _1: /* No_padding */0,
                              _2: /* No_precision */0,
                              _3: /* End_of_format */0
                            }
                          }
                        }
                      },
                      _1: "Unexpected array of size %d instead of %d"
                    }), errs._1, errs._2);
    }
    if (errs.RE_EXN_ID === Missing_field) {
      return Curry._1(Format.fprintf(ppf, /* Format */{
                      _0: {
                        TAG: /* String_literal */11,
                        _0: "Missing object field ",
                        _1: {
                          TAG: /* String */2,
                          _0: /* No_padding */0,
                          _1: /* End_of_format */0
                        }
                      },
                      _1: "Missing object field %s"
                    }), errs._1);
    }
    if (errs.RE_EXN_ID === Unexpected_field) {
      return Curry._1(Format.fprintf(ppf, /* Format */{
                      _0: {
                        TAG: /* String_literal */11,
                        _0: "Unexpected object field ",
                        _1: {
                          TAG: /* String */2,
                          _0: /* No_padding */0,
                          _1: /* End_of_format */0
                        }
                      },
                      _1: "Unexpected object field %s"
                    }), errs._1);
    }
    if (errs.RE_EXN_ID === Bad_schema) {
      return Curry._2(Format.fprintf(ppf, /* Format */{
                      _0: {
                        TAG: /* Formatting_gen */18,
                        _0: {
                          TAG: /* Open_box */1,
                          _0: /* Format */{
                            _0: {
                              TAG: /* String_literal */11,
                              _0: "<v 2>",
                              _1: /* End_of_format */0
                            },
                            _1: "<v 2>"
                          }
                        },
                        _1: {
                          TAG: /* String_literal */11,
                          _0: "bad custom schema:",
                          _1: {
                            TAG: /* Formatting_lit */17,
                            _0: {
                              TAG: /* Break */0,
                              _0: "@,",
                              _1: 0,
                              _2: 0
                            },
                            _1: {
                              TAG: /* Alpha */15,
                              _0: {
                                TAG: /* Formatting_lit */17,
                                _0: /* Close_box */0,
                                _1: /* End_of_format */0
                              }
                            }
                          }
                        }
                      },
                      _1: "@[<v 2>bad custom schema:@,%a@]"
                    }), (function (param, param$1) {
                    return print_error(print_unknown, param, param$1);
                  }), errs._1);
    }
    if (errs.RE_EXN_ID !== Cannot_destruct) {
      return Json_schema.print_error(print_unknown, ppf, errs);
    }
    var match$1 = errs._1;
    var partial_arg$6 = true;
    return Curry._4(Format.fprintf(ppf, /* Format */{
                    _0: {
                      TAG: /* Formatting_gen */18,
                      _0: {
                        TAG: /* Open_box */1,
                        _0: /* Format */{
                          _0: {
                            TAG: /* String_literal */11,
                            _0: "<v 2>",
                            _1: /* End_of_format */0
                          },
                          _1: "<v 2>"
                        }
                      },
                      _1: {
                        TAG: /* String_literal */11,
                        _0: "At ",
                        _1: {
                          TAG: /* Alpha */15,
                          _0: {
                            TAG: /* Char_literal */12,
                            _0: /* ':' */58,
                            _1: {
                              TAG: /* Formatting_lit */17,
                              _0: {
                                TAG: /* Break */0,
                                _0: "@,",
                                _1: 0,
                                _2: 0
                              },
                              _1: {
                                TAG: /* Alpha */15,
                                _0: {
                                  TAG: /* Formatting_lit */17,
                                  _0: /* Close_box */0,
                                  _1: /* End_of_format */0
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    _1: "@[<v 2>At %a:@,%a@]"
                  }), (function(partial_arg$6){
              return function (param, param$1) {
                return Json_query.print_path_as_json_path(partial_arg$6, param, param$1);
              }
              }(partial_arg$6)), match$1[0], (function (param, param$1) {
                  return print_error(print_unknown, param, param$1);
                }), match$1[1]);
  };
}

var unit = /* Ignore */2;

var $$null = /* Null */0;

var empty = /* Empty */1;

var bool = /* Bool */3;

var string = /* String */4;

var $$float = {
  TAG: /* Float */3,
  _0: undefined
};

function Make(funarg) {
  var construct = function (enc, v) {
    var construct$1 = function (_t) {
      while(true) {
        var t = _t;
        if (typeof t === "number") {
          switch (t) {
            case /* Null */0 :
                return function (param) {
                  return Curry._1(funarg.repr, "Null");
                };
            case /* Empty */1 :
                return function (param) {
                  return Curry._1(funarg.repr, {
                              NAME: "O",
                              VAL: /* [] */0
                            });
                };
            case /* Ignore */2 :
                return function (param) {
                  return Curry._1(funarg.repr, {
                              NAME: "O",
                              VAL: /* [] */0
                            });
                };
            case /* Bool */3 :
                return function (b) {
                  return Curry._1(funarg.repr, {
                              NAME: "Bool",
                              VAL: b
                            });
                };
            case /* String */4 :
                return function (s) {
                  return Curry._1(funarg.repr, {
                              NAME: "String",
                              VAL: s
                            });
                };
            
          }
        } else {
          switch (t.TAG | 0) {
            case /* Option */0 :
                var t$1 = t._0;
                return (function(t$1){
                return function (v) {
                  if (v !== undefined) {
                    return Curry._1(construct$1(t$1), Caml_option.valFromOption(v));
                  } else {
                    return Curry._1(funarg.repr, "Null");
                  }
                }
                }(t$1));
            case /* Constant */1 :
                var str = t._0;
                return (function(str){
                return function (param) {
                  return Curry._1(funarg.repr, {
                              NAME: "String",
                              VAL: str
                            });
                }
                }(str));
            case /* Int */2 :
                var match = t._0;
                var upper_bound = match.upper_bound;
                var lower_bound = match.lower_bound;
                var to_float = match.to_float;
                var int_name = match.int_name;
                return (function(upper_bound,lower_bound,to_float,int_name){
                return function (i) {
                  if (Caml_obj.caml_lessthan(i, lower_bound) || Caml_obj.caml_greaterthan(i, upper_bound)) {
                    Pervasives.invalid_arg("Json_encoding.construct: " + (int_name + " out of range"));
                  }
                  return Curry._1(funarg.repr, {
                              NAME: "Float",
                              VAL: Curry._1(to_float, i)
                            });
                }
                }(upper_bound,lower_bound,to_float,int_name));
            case /* Float */3 :
                var match$1 = t._0;
                if (match$1 === undefined) {
                  return function ($$float) {
                    return Curry._1(funarg.repr, {
                                NAME: "Float",
                                VAL: $$float
                              });
                  };
                }
                var maximum = match$1.maximum;
                var minimum = match$1.minimum;
                var err = "Json_encoding.construct: " + (match$1.float_name + " out of range");
                return (function(maximum,minimum,err){
                return function ($$float) {
                  if ($$float < minimum || $$float > maximum) {
                    Pervasives.invalid_arg(err);
                  }
                  return Curry._1(funarg.repr, {
                              NAME: "Float",
                              VAL: $$float
                            });
                }
                }(maximum,minimum,err));
            case /* Array */4 :
                var t$2 = t._0;
                var w = (function(t$2){
                return function w(v) {
                  return Curry._1(construct$1(t$2), v);
                }
                }(t$2));
                return function (arr) {
                  return Curry._1(funarg.repr, {
                              NAME: "A",
                              VAL: $$Array.to_list($$Array.map(w, arr))
                            });
                };
            case /* Obj */5 :
                var match$2 = t._0;
                switch (match$2.TAG | 0) {
                  case /* Req */0 :
                      var match$3 = match$2._0;
                      var t$3 = match$3.encoding;
                      var n = match$3.name;
                      return (function(t$3,n){
                      return function (v) {
                        return Curry._1(funarg.repr, {
                                    NAME: "O",
                                    VAL: {
                                      hd: [
                                        n,
                                        Curry._1(construct$1(t$3), v)
                                      ],
                                      tl: /* [] */0
                                    }
                                  });
                      }
                      }(t$3,n));
                  case /* Opt */1 :
                      var match$4 = match$2._0;
                      var t$4 = match$4.encoding;
                      var n$1 = match$4.name;
                      return (function(t$4,n$1){
                      return function (v) {
                        if (v !== undefined) {
                          return Curry._1(funarg.repr, {
                                      NAME: "O",
                                      VAL: {
                                        hd: [
                                          n$1,
                                          Curry._1(construct$1(t$4), Caml_option.valFromOption(v))
                                        ],
                                        tl: /* [] */0
                                      }
                                    });
                        } else {
                          return Curry._1(funarg.repr, {
                                      NAME: "O",
                                      VAL: /* [] */0
                                    });
                        }
                      }
                      }(t$4,n$1));
                  case /* Dft */2 :
                      var match$5 = match$2._0;
                      var d = match$5.default;
                      var t$5 = match$5.encoding;
                      var n$2 = match$5.name;
                      return (function(d,t$5,n$2){
                      return function (v) {
                        return Curry._1(funarg.repr, {
                                    NAME: "O",
                                    VAL: Caml_obj.caml_notequal(v, d) ? ({
                                          hd: [
                                            n$2,
                                            Curry._1(construct$1(t$5), v)
                                          ],
                                          tl: /* [] */0
                                        }) : /* [] */0
                                  });
                      }
                      }(d,t$5,n$2));
                  
                }
            case /* Objs */6 :
                var o2 = t._1;
                var o1 = t._0;
                return (function(o2,o1){
                return function (param) {
                  var match = Curry._1(funarg.view, Curry._1(construct$1(o1), param[0]));
                  var match$1 = Curry._1(funarg.view, Curry._1(construct$1(o2), param[1]));
                  if (typeof match === "string" || !(match.NAME === "O" && !(typeof match$1 === "string" || match$1.NAME !== "O"))) {
                    return Pervasives.invalid_arg("Json_encoding.construct: consequence of bad merge_objs");
                  } else {
                    return Curry._1(funarg.repr, {
                                NAME: "O",
                                VAL: Pervasives.$at(match.VAL, match$1.VAL)
                              });
                  }
                }
                }(o2,o1));
            case /* Tup */7 :
                var t$6 = t._0;
                return (function(t$6){
                return function (v) {
                  return Curry._1(funarg.repr, {
                              NAME: "A",
                              VAL: {
                                hd: Curry._1(construct$1(t$6), v),
                                tl: /* [] */0
                              }
                            });
                }
                }(t$6));
            case /* Tups */8 :
                var o2$1 = t._1;
                var o1$1 = t._0;
                return (function(o2$1,o1$1){
                return function (param) {
                  var match = Curry._1(funarg.view, Curry._1(construct$1(o1$1), param[0]));
                  var match$1 = Curry._1(funarg.view, Curry._1(construct$1(o2$1), param[1]));
                  if (typeof match === "string" || !(match.NAME === "A" && !(typeof match$1 === "string" || match$1.NAME !== "A"))) {
                    return Pervasives.invalid_arg("Json_encoding.construct: consequence of bad merge_tups");
                  } else {
                    return Curry._1(funarg.repr, {
                                NAME: "A",
                                VAL: Pervasives.$at(match.VAL, match$1.VAL)
                              });
                  }
                }
                }(o2$1,o1$1));
            case /* Custom */9 :
                var write = t._0.write;
                return (function(write){
                return function (j) {
                  return Curry._2(write, funarg, j);
                }
                }(write));
            case /* Conv */10 :
                var t$7 = t._2;
                var ffrom = t._0;
                return (function(t$7,ffrom){
                return function (v) {
                  return Curry._1(construct$1(t$7), Curry._1(ffrom, v));
                }
                }(t$7,ffrom));
            case /* Describe */11 :
                _t = t._0.encoding;
                continue ;
            case /* Mu */12 :
                _t = Curry._1(t._0.self, t);
                continue ;
            case /* Union */13 :
                var cases = t._0;
                return (function(cases){
                return function (v) {
                  var _param = cases;
                  while(true) {
                    var param = _param;
                    if (!param) {
                      return Pervasives.invalid_arg("Json_encoding.construct: consequence of bad union");
                    }
                    var match = param.hd._0;
                    var v$1 = Curry._1(match.proj, v);
                    if (v$1 !== undefined) {
                      return Curry._1(construct$1(match.encoding), Caml_option.valFromOption(v$1));
                    }
                    _param = param.tl;
                    continue ;
                  };
                }
                }(cases));
            
          }
        }
      };
    };
    return Curry._1(construct$1(enc), v);
  };
  var destruct = function (_t) {
    while(true) {
      var t = _t;
      if (typeof t === "number") {
        switch (t) {
          case /* Null */0 :
              return function (v) {
                var k = Curry._1(funarg.view, v);
                if (k === "Null") {
                  return ;
                }
                throw unexpected(k, "null");
              };
          case /* Empty */1 :
              return function (v) {
                var k = Curry._1(funarg.view, v);
                if (typeof k === "string") {
                  throw unexpected(k, "an empty object");
                }
                if (k.NAME === "O") {
                  var match = k.VAL;
                  if (!match) {
                    return ;
                  }
                  if (match.tl) {
                    throw unexpected(k, "an empty object");
                  }
                  throw {
                        RE_EXN_ID: Cannot_destruct,
                        _1: [
                          /* [] */0,
                          {
                            RE_EXN_ID: Unexpected_field,
                            _1: match.hd[0]
                          }
                        ],
                        Error: new Error()
                      };
                }
                throw unexpected(k, "an empty object");
              };
          case /* Ignore */2 :
              return function (v) {
                Curry._1(funarg.view, v);
                
              };
          case /* Bool */3 :
              return function (v) {
                var k = Curry._1(funarg.view, v);
                if (typeof k === "string") {
                  throw unexpected(k, "boolean");
                }
                if (k.NAME === "Bool") {
                  return k.VAL;
                }
                throw unexpected(k, "boolean");
              };
          case /* String */4 :
              return function (v) {
                var k = Curry._1(funarg.view, v);
                if (typeof k === "string") {
                  throw unexpected(k, "string");
                }
                if (k.NAME === "String") {
                  return k.VAL;
                }
                throw unexpected(k, "string");
              };
          
        }
      } else {
        switch (t.TAG | 0) {
          case /* Option */0 :
              var t$1 = t._0;
              return (function(t$1){
              return function (v) {
                var match = Curry._1(funarg.view, v);
                if (match === "Null") {
                  return ;
                } else {
                  return Caml_option.some(Curry._1(destruct(t$1), v));
                }
              }
              }(t$1));
          case /* Constant */1 :
              var str = t._0;
              return (function(str){
              return function (v) {
                var x = Curry._1(funarg.view, v);
                if (typeof x === "string") {
                  throw unexpected(x, str);
                }
                if (x.NAME === "String") {
                  if (x.VAL === str) {
                    return ;
                  }
                  throw unexpected(x, str);
                }
                throw unexpected(x, str);
              }
              }(str));
          case /* Int */2 :
              var match = t._0;
              var to_float = match.to_float;
              var of_float = match.of_float;
              var int_name = match.int_name;
              var lower_bound = Curry._1(to_float, match.lower_bound);
              var upper_bound = Curry._1(to_float, match.upper_bound);
              return (function(of_float,int_name,lower_bound,upper_bound){
              return function (v) {
                var k = Curry._1(funarg.view, v);
                if (typeof k === "string") {
                  throw unexpected(k, "number");
                }
                if (k.NAME === "Float") {
                  var match = Caml_float.caml_modf_float(k.VAL);
                  var v$1 = match[1];
                  if (match[0] !== 0) {
                    var exn_1 = int_name + " cannot have a fractional part";
                    var exn = {
                      RE_EXN_ID: "Failure",
                      _1: exn_1
                    };
                    throw {
                          RE_EXN_ID: Cannot_destruct,
                          _1: [
                            /* [] */0,
                            exn
                          ],
                          Error: new Error()
                        };
                  }
                  if (v$1 < lower_bound || v$1 > upper_bound) {
                    var exn_1$1 = int_name + " out of range";
                    var exn$1 = {
                      RE_EXN_ID: "Failure",
                      _1: exn_1$1
                    };
                    throw {
                          RE_EXN_ID: Cannot_destruct,
                          _1: [
                            /* [] */0,
                            exn$1
                          ],
                          Error: new Error()
                        };
                  }
                  return Curry._1(of_float, v$1);
                }
                throw unexpected(k, "number");
              }
              }(of_float,int_name,lower_bound,upper_bound));
          case /* Float */3 :
              var match$1 = t._0;
              if (match$1 === undefined) {
                return function (v) {
                  var k = Curry._1(funarg.view, v);
                  if (typeof k === "string") {
                    throw unexpected(k, "float");
                  }
                  if (k.NAME === "Float") {
                    return k.VAL;
                  }
                  throw unexpected(k, "float");
                };
              }
              var maximum = match$1.maximum;
              var minimum = match$1.minimum;
              var float_name = match$1.float_name;
              return (function(maximum,minimum,float_name){
              return function (v) {
                var k = Curry._1(funarg.view, v);
                if (typeof k === "string") {
                  throw unexpected(k, "float");
                }
                if (k.NAME === "Float") {
                  var f = k.VAL;
                  if (!(f < minimum || f > maximum)) {
                    return f;
                  }
                  var exn_1 = float_name + " out of range";
                  var exn = {
                    RE_EXN_ID: "Failure",
                    _1: exn_1
                  };
                  throw {
                        RE_EXN_ID: Cannot_destruct,
                        _1: [
                          /* [] */0,
                          exn
                        ],
                        Error: new Error()
                      };
                }
                throw unexpected(k, "float");
              }
              }(maximum,minimum,float_name));
          case /* Array */4 :
              var t$2 = t._0;
              return (function(t$2){
              return function (v) {
                var k = Curry._1(funarg.view, v);
                if (typeof k === "string") {
                  throw unexpected(k, "array");
                }
                var variant = k.NAME;
                if (variant === "A") {
                  return $$Array.mapi((function (i, cell) {
                                try {
                                  return Curry._1(destruct(t$2), cell);
                                }
                                catch (raw_exn){
                                  var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
                                  if (exn.RE_EXN_ID === Cannot_destruct) {
                                    var match = exn._1;
                                    throw {
                                          RE_EXN_ID: Cannot_destruct,
                                          _1: [
                                            {
                                              hd: {
                                                NAME: "Index",
                                                VAL: i
                                              },
                                              tl: match[0]
                                            },
                                            match[1]
                                          ],
                                          Error: new Error()
                                        };
                                  }
                                  throw exn;
                                }
                              }), $$Array.of_list(k.VAL));
                }
                if (variant === "O") {
                  if (k.VAL) {
                    throw unexpected(k, "array");
                  }
                  return [];
                }
                throw unexpected(k, "array");
              }
              }(t$2));
          case /* Obj */5 :
              var d = destruct_obj(t);
              return (function(d){
              return function (v) {
                var k = Curry._1(funarg.view, v);
                if (typeof k === "string") {
                  throw unexpected(k, "object");
                }
                if (k.NAME === "O") {
                  var match = Curry._1(d, k.VAL);
                  var rest = match[1];
                  var r = match[0];
                  if (!rest) {
                    return r;
                  }
                  if (!match[2]) {
                    throw {
                          RE_EXN_ID: Unexpected_field,
                          _1: rest.hd[0],
                          Error: new Error()
                        };
                  }
                  return r;
                }
                throw unexpected(k, "object");
              }
              }(d));
          case /* Objs */6 :
              var d$1 = destruct_obj(t);
              return (function(d$1){
              return function (v) {
                var k = Curry._1(funarg.view, v);
                if (typeof k === "string") {
                  throw unexpected(k, "object");
                }
                if (k.NAME === "O") {
                  var match = Curry._1(d$1, k.VAL);
                  var rest = match[1];
                  var r = match[0];
                  if (!rest) {
                    return r;
                  }
                  if (!match[2]) {
                    throw {
                          RE_EXN_ID: Unexpected_field,
                          _1: rest.hd[0],
                          Error: new Error()
                        };
                  }
                  return r;
                }
                throw unexpected(k, "object");
              }
              }(d$1));
          case /* Tup */7 :
              var match$2 = destruct_tup(0, t);
              var i = match$2[1];
              var r = match$2[0];
              return (function(i,r){
              return function (v) {
                var k = Curry._1(funarg.view, v);
                if (typeof k === "string") {
                  throw unexpected(k, "array");
                }
                if (k.NAME === "A") {
                  var cells = $$Array.of_list(k.VAL);
                  var len = cells.length;
                  if (i !== cells.length) {
                    throw {
                          RE_EXN_ID: Cannot_destruct,
                          _1: [
                            /* [] */0,
                            {
                              RE_EXN_ID: Bad_array_size,
                              _1: len,
                              _2: i
                            }
                          ],
                          Error: new Error()
                        };
                  }
                  return Curry._1(r, cells);
                }
                throw unexpected(k, "array");
              }
              }(i,r));
          case /* Tups */8 :
              var match$3 = destruct_tup(0, t);
              var i$1 = match$3[1];
              var r$1 = match$3[0];
              return (function(i$1,r$1){
              return function (v) {
                var k = Curry._1(funarg.view, v);
                if (typeof k === "string") {
                  throw unexpected(k, "array");
                }
                if (k.NAME === "A") {
                  var cells = $$Array.of_list(k.VAL);
                  var len = cells.length;
                  if (i$1 !== cells.length) {
                    throw {
                          RE_EXN_ID: Cannot_destruct,
                          _1: [
                            /* [] */0,
                            {
                              RE_EXN_ID: Bad_array_size,
                              _1: len,
                              _2: i$1
                            }
                          ],
                          Error: new Error()
                        };
                  }
                  return Curry._1(r$1, cells);
                }
                throw unexpected(k, "array");
              }
              }(i$1,r$1));
          case /* Custom */9 :
              return Curry._1(t._0.read, funarg);
          case /* Conv */10 :
              var t$3 = t._2;
              var fto = t._1;
              return (function(t$3,fto){
              return function (v) {
                return Curry._1(fto, Curry._1(destruct(t$3), v));
              }
              }(t$3,fto));
          case /* Describe */11 :
              _t = t._0.encoding;
              continue ;
          case /* Mu */12 :
              _t = Curry._1(t._0.self, t);
              continue ;
          case /* Union */13 :
              var cases = t._0;
              return (function(cases){
              return function (v) {
                var _errs = /* [] */0;
                var _param = cases;
                while(true) {
                  var param = _param;
                  var errs = _errs;
                  if (param) {
                    var match = param.hd._0;
                    try {
                      return Curry._1(match.inj, Curry._1(destruct(match.encoding), v));
                    }
                    catch (raw_err){
                      var err = Caml_js_exceptions.internalToOCamlException(raw_err);
                      _param = param.tl;
                      _errs = {
                        hd: err,
                        tl: errs
                      };
                      continue ;
                    }
                  } else {
                    throw {
                          RE_EXN_ID: Cannot_destruct,
                          _1: [
                            /* [] */0,
                            {
                              RE_EXN_ID: No_case_matched,
                              _1: List.rev(errs)
                            }
                          ],
                          Error: new Error()
                        };
                  }
                };
              }
              }(cases));
          
        }
      }
    };
  };
  var destruct_tup = function (i, _t) {
    while(true) {
      var t = _t;
      if (typeof t === "number") {
        return Pervasives.invalid_arg("Json_encoding.destruct: consequence of bad merge_tups");
      }
      switch (t.TAG | 0) {
        case /* Tup */7 :
            var t$1 = t._0;
            return [
                    (function(t$1){
                    return function (arr) {
                      try {
                        return Curry._1(destruct(t$1), Caml_array.get(arr, i));
                      }
                      catch (raw_exn){
                        var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
                        if (exn.RE_EXN_ID === Cannot_destruct) {
                          var match = exn._1;
                          throw {
                                RE_EXN_ID: Cannot_destruct,
                                _1: [
                                  {
                                    hd: {
                                      NAME: "Index",
                                      VAL: i
                                    },
                                    tl: match[0]
                                  },
                                  match[1]
                                ],
                                Error: new Error()
                              };
                        }
                        throw exn;
                      }
                    }
                    }(t$1)),
                    i + 1 | 0
                  ];
        case /* Tups */8 :
            var match = destruct_tup(i, t._0);
            var r1 = match[0];
            var match$1 = destruct_tup(match[1], t._1);
            var r2 = match$1[0];
            return [
                    (function(r1,r2){
                    return function (arr) {
                      return [
                              Curry._1(r1, arr),
                              Curry._1(r2, arr)
                            ];
                    }
                    }(r1,r2)),
                    match$1[1]
                  ];
        case /* Conv */10 :
            var fto = t._1;
            var match$2 = destruct_tup(i, t._2);
            var r = match$2[0];
            return [
                    (function(fto,r){
                    return function (arr) {
                      return Curry._1(fto, Curry._1(r, arr));
                    }
                    }(fto,r)),
                    match$2[1]
                  ];
        case /* Describe */11 :
            _t = t._0.encoding;
            continue ;
        case /* Mu */12 :
            _t = Curry._1(t._0.self, t);
            continue ;
        default:
          return Pervasives.invalid_arg("Json_encoding.destruct: consequence of bad merge_tups");
      }
    };
  };
  var destruct_obj = function (_t) {
    while(true) {
      var t = _t;
      var assoc = function (_acc, n, _param) {
        while(true) {
          var param = _param;
          var acc = _acc;
          if (param) {
            var rest = param.tl;
            var oth = param.hd;
            if (Caml_obj.caml_equal(n, oth[0])) {
              return [
                      oth[1],
                      Pervasives.$at(acc, rest)
                    ];
            }
            _param = rest;
            _acc = {
              hd: oth,
              tl: acc
            };
            continue ;
          }
          throw {
                RE_EXN_ID: "Not_found",
                Error: new Error()
              };
        };
      };
      if (typeof t === "number") {
        switch (t) {
          case /* Empty */1 :
              return function (fields) {
                return [
                        undefined,
                        fields,
                        false
                      ];
              };
          case /* Ignore */2 :
              return function (fields) {
                return [
                        undefined,
                        fields,
                        true
                      ];
              };
          default:
            return Pervasives.invalid_arg("Json_encoding.destruct: consequence of bad merge_objs");
        }
      } else {
        switch (t.TAG | 0) {
          case /* Obj */5 :
              var match = t._0;
              switch (match.TAG | 0) {
                case /* Req */0 :
                    var match$1 = match._0;
                    var t$1 = match$1.encoding;
                    var n = match$1.name;
                    return (function(t$1,n){
                    return function (fields) {
                      try {
                        var match = assoc(/* [] */0, n, fields);
                        return [
                                Curry._1(destruct(t$1), match[0]),
                                match[1],
                                false
                              ];
                      }
                      catch (raw_exn){
                        var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
                        if (exn.RE_EXN_ID === "Not_found") {
                          throw {
                                RE_EXN_ID: Cannot_destruct,
                                _1: [
                                  /* [] */0,
                                  {
                                    RE_EXN_ID: Missing_field,
                                    _1: n
                                  }
                                ],
                                Error: new Error()
                              };
                        }
                        if (exn.RE_EXN_ID === Cannot_destruct) {
                          var match$1 = exn._1;
                          throw {
                                RE_EXN_ID: Cannot_destruct,
                                _1: [
                                  {
                                    hd: {
                                      NAME: "Field",
                                      VAL: n
                                    },
                                    tl: match$1[0]
                                  },
                                  match$1[1]
                                ],
                                Error: new Error()
                              };
                        }
                        throw exn;
                      }
                    }
                    }(t$1,n));
                case /* Opt */1 :
                    var match$2 = match._0;
                    var t$2 = match$2.encoding;
                    var n$1 = match$2.name;
                    return (function(t$2,n$1){
                    return function (fields) {
                      try {
                        var match = assoc(/* [] */0, n$1, fields);
                        return [
                                Caml_option.some(Curry._1(destruct(t$2), match[0])),
                                match[1],
                                false
                              ];
                      }
                      catch (raw_exn){
                        var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
                        if (exn.RE_EXN_ID === "Not_found") {
                          return [
                                  undefined,
                                  fields,
                                  false
                                ];
                        }
                        if (exn.RE_EXN_ID === Cannot_destruct) {
                          var match$1 = exn._1;
                          throw {
                                RE_EXN_ID: Cannot_destruct,
                                _1: [
                                  {
                                    hd: {
                                      NAME: "Field",
                                      VAL: n$1
                                    },
                                    tl: match$1[0]
                                  },
                                  match$1[1]
                                ],
                                Error: new Error()
                              };
                        }
                        throw exn;
                      }
                    }
                    }(t$2,n$1));
                case /* Dft */2 :
                    var match$3 = match._0;
                    var d = match$3.default;
                    var t$3 = match$3.encoding;
                    var n$2 = match$3.name;
                    return (function(d,t$3,n$2){
                    return function (fields) {
                      try {
                        var match = assoc(/* [] */0, n$2, fields);
                        return [
                                Curry._1(destruct(t$3), match[0]),
                                match[1],
                                false
                              ];
                      }
                      catch (raw_exn){
                        var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
                        if (exn.RE_EXN_ID === "Not_found") {
                          return [
                                  d,
                                  fields,
                                  false
                                ];
                        }
                        if (exn.RE_EXN_ID === Cannot_destruct) {
                          var match$1 = exn._1;
                          throw {
                                RE_EXN_ID: Cannot_destruct,
                                _1: [
                                  {
                                    hd: {
                                      NAME: "Field",
                                      VAL: n$2
                                    },
                                    tl: match$1[0]
                                  },
                                  match$1[1]
                                ],
                                Error: new Error()
                              };
                        }
                        throw exn;
                      }
                    }
                    }(d,t$3,n$2));
                
              }
          case /* Objs */6 :
              var d1 = destruct_obj(t._0);
              var d2 = destruct_obj(t._1);
              return (function(d1,d2){
              return function (fields) {
                var match = Curry._1(d1, fields);
                var match$1 = Curry._1(d2, match[1]);
                return [
                        [
                          match[0],
                          match$1[0]
                        ],
                        match$1[1],
                        match[2] || match$1[2]
                      ];
              }
              }(d1,d2));
          case /* Conv */10 :
              var fto = t._1;
              var d$1 = destruct_obj(t._2);
              return (function(fto,d$1){
              return function (fields) {
                var match = Curry._1(d$1, fields);
                return [
                        Curry._1(fto, match[0]),
                        match[1],
                        match[2]
                      ];
              }
              }(fto,d$1));
          case /* Describe */11 :
              _t = t._0.encoding;
              continue ;
          case /* Mu */12 :
              _t = Curry._1(t._0.self, t);
              continue ;
          case /* Union */13 :
              var cases = t._0;
              return (function(cases){
              return function (fields) {
                var _errs = /* [] */0;
                var _param = cases;
                while(true) {
                  var param = _param;
                  var errs = _errs;
                  if (param) {
                    var match = param.hd._0;
                    try {
                      var match$1 = Curry._1(destruct_obj(match.encoding), fields);
                      return [
                              Curry._1(match.inj, match$1[0]),
                              match$1[1],
                              match$1[2]
                            ];
                    }
                    catch (raw_err){
                      var err = Caml_js_exceptions.internalToOCamlException(raw_err);
                      _param = param.tl;
                      _errs = {
                        hd: err,
                        tl: errs
                      };
                      continue ;
                    }
                  } else {
                    throw {
                          RE_EXN_ID: Cannot_destruct,
                          _1: [
                            /* [] */0,
                            {
                              RE_EXN_ID: No_case_matched,
                              _1: List.rev(errs)
                            }
                          ],
                          Error: new Error()
                        };
                  }
                };
              }
              }(cases));
          default:
            return Pervasives.invalid_arg("Json_encoding.destruct: consequence of bad merge_objs");
        }
      }
    };
  };
  var custom = function (write, read, schema) {
    var read$1 = function (Repr_f, repr) {
      return Curry._1(read, Json_repr.convert(Repr_f, funarg, repr));
    };
    var write$1 = function (Repr_f, v) {
      return Json_repr.convert(funarg, Repr_f, Curry._1(write, v));
    };
    return {
            TAG: /* Custom */9,
            _0: {
              write: write$1,
              read: read$1
            },
            _1: schema
          };
  };
  return {
          construct: construct,
          destruct: destruct,
          custom: custom
        };
}

exports.construct = construct;
exports.destruct = destruct;
exports.unit = unit;
exports.$$null = $$null;
exports.empty = empty;
exports.$$int = $$int;
exports.int32 = int32;
exports.int53 = int53;
exports.ranged_int = ranged_int;
exports.ranged_int32 = ranged_int32;
exports.ranged_int53 = ranged_int53;
exports.bool = bool;
exports.string = string;
exports.constant = constant;
exports.bytes = bytes;
exports.$$float = $$float;
exports.ranged_float = ranged_float;
exports.option = option;
exports.req = req;
exports.opt = opt;
exports.dft = dft;
exports.obj1 = obj1;
exports.obj2 = obj2;
exports.obj3 = obj3;
exports.obj4 = obj4;
exports.obj5 = obj5;
exports.obj6 = obj6;
exports.obj7 = obj7;
exports.obj8 = obj8;
exports.obj9 = obj9;
exports.obj10 = obj10;
exports.merge_objs = merge_objs;
exports.array = array;
exports.list = list;
exports.tup1 = tup1;
exports.tup2 = tup2;
exports.tup3 = tup3;
exports.tup4 = tup4;
exports.tup5 = tup5;
exports.tup6 = tup6;
exports.tup7 = tup7;
exports.tup8 = tup8;
exports.tup9 = tup9;
exports.tup10 = tup10;
exports.merge_tups = merge_tups;
exports.$$case = $$case;
exports.union = union;
exports.custom = custom;
exports.conv = conv;
exports.mu = mu;
exports.any_ezjson_value = any_ezjson_value;
exports.any_document = any_document;
exports.any_schema = any_schema;
exports.schema = schema;
exports.def = def;
exports.Cannot_destruct = Cannot_destruct;
exports.Unexpected = Unexpected;
exports.No_case_matched = No_case_matched;
exports.Bad_array_size = Bad_array_size;
exports.Missing_field = Missing_field;
exports.Unexpected_field = Unexpected_field;
exports.Bad_schema = Bad_schema;
exports.print_error = print_error;
exports.Make = Make;
exports.repr_agnostic_custom = repr_agnostic_custom;
exports.any_value = any_value;
exports.is_nullable = is_nullable;
/* any_schema Not a pure module */
